<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python学习日记-字符串与常用数据结构</title>
      <link href="/2023/01/20/python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>/2023/01/20/python%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>其实很久以前就开始接触python了，从做出自以为很厉害的词云图，爬虫，简单的模型训练，到down开源代码改出毕业设计；</p><p>从照着书敲，照着网页敲，到自己瞎堆代码造屎山。</p><p>在做完一个又一个不想回看的实验后，产生是时候构建一个完整的知识体系了这种觉悟。</p><p>故在此记录学习python的点点滴滴。</p><p>（来自github：Python-100-Days）</p><hr><h2 id="数字与字符串的格式化输出"><a href="#数字与字符串的格式化输出" class="headerlink" title="数字与字符串的格式化输出"></a>数字与字符串的格式化输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串的格式化输出</span></span><br><span class="line">str1 = <span class="string">&#x27;春野樱&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;旗木卡卡西&#x27;</span></span><br><span class="line">str3 = <span class="string">&#x27;宇智波佐助&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;的老师是&#123;1&#125;，他还有一个学生叫&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(str1, str2, str3))</span><br><span class="line"></span><br><span class="line">a, b = <span class="number">5</span>, <span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(a, b, a*b))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数字的格式化输出</span></span><br><span class="line">a, b = <span class="number">4</span>, <span class="number">7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a*b))</span><br></pre></td></tr></table></figure><h2 id="常用的数据结构"><a href="#常用的数据结构" class="headerlink" title="常用的数据结构"></a>常用的数据结构</h2><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h3><p>列表是值的有序序列，每个值都通过索引进行标识。每个元素可以用<code>for</code>遍历，也可以利用切片访问和取出。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment"># print(list1)</span></span><br><span class="line"><span class="comment"># print(len(list1))</span></span><br><span class="line">list2 = [<span class="string">&#x27;hello&#x27;</span>] * <span class="number">3</span></span><br><span class="line"><span class="comment"># print(list2) # [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"><span class="comment"># print(list1[-3:]) # [8, 9, 100]</span></span><br><span class="line">list1[<span class="number">3</span>] = <span class="number">78</span></span><br><span class="line"><span class="comment"># print(list1) # [1, 3, 5, 78, 9, 100]</span></span><br><span class="line"><span class="comment"># 用循环访问列表中元素</span></span><br><span class="line"><span class="comment"># for index in range(len(list1)):</span></span><br><span class="line"><span class="comment">#     print(list1[index])</span></span><br><span class="line"><span class="comment"># for elem in list1:</span></span><br><span class="line"><span class="comment">#     print(elem)</span></span><br><span class="line"><span class="comment"># 通过enumerate函数访问列表，可以同时获得索引与值</span></span><br><span class="line"><span class="keyword">for</span> index, elem <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(index, elem)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">89</span>, <span class="number">245</span>]</span><br><span class="line">list1.append(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># print(list1) # [1, 3, 4, 7, 89, 245, 5]</span></span><br><span class="line">list1.insert(<span class="number">2</span>, <span class="number">40</span>) <span class="comment"># 在索引为2的位置上添加元素40</span></span><br><span class="line"><span class="comment"># print(list1) # [1, 3, 40, 4, 7, 89, 245, 5]</span></span><br><span class="line"><span class="comment"># 删除元素时，先判断其是否在列表中</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span> <span class="keyword">in</span> list1:</span><br><span class="line">    list1.remove(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># append 在末尾添加元素</span></span><br><span class="line"><span class="comment"># insert 在指定位置添加元素</span></span><br><span class="line"><span class="comment"># pop 在指定位置删除元素,括号中为空则删除末尾元素</span></span><br><span class="line"><span class="comment"># list1.pop()</span></span><br><span class="line">list1.pop(<span class="built_in">len</span>(list1) - <span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(list1)</span></span><br><span class="line">list1.clear()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对列表中元素进行排序</span></span><br><span class="line">list1 = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;zoo&#x27;</span>, <span class="string">&#x27;internationalization&#x27;</span>, <span class="string">&#x27;blueberry&#x27;</span>]</span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1)</span><br><span class="line"><span class="comment"># print(list2) # 按字母表排序</span></span><br><span class="line">list3 = <span class="built_in">sorted</span>(list1, reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(list3) # reverse指倒序</span></span><br><span class="line">list4 = <span class="built_in">sorted</span>(list1, key = <span class="built_in">len</span>) <span class="comment"># 指定排序关键字为长度</span></span><br><span class="line">list1.sort(reverse = <span class="literal">True</span>) <span class="comment"># 也可直接让对象排序,只不过不是sorted,而是sort</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 采用生成表达式来生成列表</span></span><br><span class="line">f = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">f = [a + b <span class="keyword">for</span> a <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span> <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">&#x27;145&#x27;</span>] <span class="comment"># [&#x27;a1&#x27;, &#x27;a4&#x27;, &#x27;a5&#x27;, &#x27;b1&#x27;, &#x27;b4&#x27;, &#x27;b5&#x27;, &#x27;c1&#x27;, &#x27;c4&#x27;, &#x27;c5&#x27;]</span></span><br><span class="line"><span class="comment"># 此处创建的不是列表，而是生成器对象。</span></span><br><span class="line"><span class="comment"># 通过生成器可以获取到数据，但是不占用额外空间。</span></span><br><span class="line">f = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line"><span class="comment"># print(sys.getsizeof(f)) # 112</span></span><br><span class="line"><span class="built_in">print</span>(f) <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x000001FEC1F04820&gt;</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(val)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过关键词yiled将函数改造成生成器函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> fib(<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment"># a, b = b, a+b 这句话的含义是：先计算&#x27;=&#x27;右边的值，再将右边的值赋给左边</span></span><br></pre></td></tr></table></figure><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组 tuple"></a>元组 tuple</h3><p>元组也是一种容器数据类型，可以用一个变量来存储多个数据。</p><p><strong>与列表不同的是，元组中的元素不可以再更改</strong>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明元组</span></span><br><span class="line">t = (<span class="string">&#x27;Shika&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;中国北京&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(t)</span></span><br><span class="line"><span class="comment"># 报错，因为元组中元素不可更改</span></span><br><span class="line"><span class="comment"># tuple[2] = &#x27;中国海南&#x27;</span></span><br><span class="line"><span class="comment"># 元组与列表之间可以相互转换</span></span><br><span class="line">person_list = [<span class="string">&#x27;宇智波佐助&#x27;</span>, <span class="number">7</span>, <span class="literal">False</span>]</span><br><span class="line">person_tuple = <span class="built_in">tuple</span>(person_list)</span><br><span class="line"><span class="comment"># print(person_tuple) # (&#x27;宇智波佐助&#x27;, 7, False)</span></span><br><span class="line"><span class="comment"># print(list(person_tuple)) # [&#x27;宇智波佐助&#x27;, 7, False]</span></span><br><span class="line"><span class="comment"># 且列表中的元素可以更改</span></span><br><span class="line">person_list[<span class="number">2</span>] = <span class="string">&#x27;春野樱&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(person_list) <span class="comment"># [&#x27;宇智波佐助&#x27;, 7, &#x27;春野樱&#x27;]</span></span><br></pre></td></tr></table></figure><p>Q：为什么已经有列表，还需要元组？</p><p>A：元组中不能够修改的对象状态使项目更容易维护，并且其创建时间和空间占用都优于列表。</p><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h3><p>与数学中的集合一致，<strong>其中不允许有重复元素</strong>，可以进行交、并、差、补的运算。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建并使用集合</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># print(set1) # &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># print(&#x27;Length of set1 is&#x27;,len(set1)) # Length of set1 is 3</span></span><br><span class="line">set2 = <span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">set3 = <span class="built_in">set</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>))</span><br><span class="line"><span class="comment"># print(set2, set3) # &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125; &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># 采用print时，中间加一个逗号分隔，可以输出多个对象，中间自动空格填充。</span></span><br><span class="line">set4 = &#123;num <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> num % <span class="number">5</span> == <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集合中元素的增删</span></span><br><span class="line">set1.add(<span class="number">4</span>)</span><br><span class="line">set1.add(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 向set2末尾添加两个元素，这种方法可以为集合添加多个元素</span></span><br><span class="line">set2.update([<span class="number">11</span>, <span class="number">12</span>])</span><br><span class="line"><span class="comment"># 集合删除元素：discard或remove,pop</span></span><br><span class="line"><span class="comment"># 三者存在不同，remove移除一个不存在的元素会报错</span></span><br><span class="line">set2.discard(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">4</span> <span class="keyword">in</span> set2:</span><br><span class="line">    set2.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(set2)</span><br><span class="line"><span class="comment"># 集合中的pop方法，是从左边删除元素的</span></span><br><span class="line"><span class="built_in">print</span>(set3.pop())</span><br></pre></td></tr></table></figure><h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h3><p>与列表、集合共同点：可以存储任意类型对象</p><p>与列表、集合不同点：以键值对方式存储，键和值通过冒号分开</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;春野樱&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;宇智波佐助&#x27;</span>: <span class="number">91</span>, <span class="string">&#x27;漩涡鸣人&#x27;</span>: <span class="number">61</span>&#125;</span><br><span class="line"><span class="comment"># print(scores)</span></span><br><span class="line"><span class="comment"># 创造字典的构造器语法</span></span><br><span class="line">items1 = <span class="built_in">dict</span>(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># print(items1) # &#123;&#x27;one&#x27;: 1, &#x27;two&#x27;: 2, &#x27;three&#x27;: 3, &#x27;four&#x27;: 4&#125;</span></span><br><span class="line"><span class="comment"># 通过zip函数将两个列表压成一个字典</span></span><br><span class="line">items2 = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="string">&#x27;123&#x27;</span>))</span><br><span class="line"><span class="comment"># print(items2) # &#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;, &#x27;c&#x27;: &#x27;3&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 创造字典的推导式语法</span></span><br><span class="line">items3 = &#123;num: num ** <span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line"><span class="comment"># print(scores[&#x27;漩涡鸣人&#x27;])</span></span><br><span class="line"><span class="comment"># 遍历字典中所有键值对</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> scores:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span>:<span class="subst">&#123;scores[key]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># print(f&#x27;&#123;a&#125; * &#123;b&#125; = &#123;a*b&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># 相当于 print(&#x27;&#123;&#125; * &#123;&#125; = &#123;&#125;&#x27;.format(a, b, a*b)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新字典中的元素</span></span><br><span class="line">scores[<span class="string">&#x27;奈良鹿丸&#x27;</span>] = <span class="number">95</span></span><br><span class="line">scores[<span class="string">&#x27;山中井野&#x27;</span>] = <span class="number">80</span></span><br><span class="line"><span class="comment"># 字典中的批量构造，更新，字符串是不需要加引号的。</span></span><br><span class="line">scores.update(日向雏田=<span class="number">80</span>, 日向宁次 = <span class="number">82</span>)</span><br><span class="line"><span class="comment"># if &#x27;宇智波佐助&#x27; in scores:</span></span><br><span class="line"><span class="comment">#     print(scores[&#x27;宇智波佐助&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(scores.get(&#x27;李&#x27;)) # None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除字典中的元素</span></span><br><span class="line"><span class="comment"># print(scores.popitem()) # (&#x27;日向宁次&#x27;, 82)</span></span><br><span class="line"><span class="comment"># print(scores.pop(&#x27;日向雏田&#x27;)) # 80</span></span><br><span class="line">scores.clear()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 菜鸟养成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/01/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>忙活了好久，找到了小时候布置QQ空间和邮箱博客的感觉。</p><p>决定建立个人技术博客的起因在于：最近学python特别迫切想找个记录的地方，CSDN还被同门关注了，于是想到了从github搭建。</p><p>现在是研一的寒假，疫情从某方面来讲终于结束了，也再无法作为摆烂的理由。</p><p>希望自己永远自省，永远向前。</p><p>希望自己不忘初心，努力生活。</p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
