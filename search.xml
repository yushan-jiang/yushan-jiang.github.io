<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaGuide</title>
      <link href="/2023/10/13/JavaGuide/"/>
      <url>/2023/10/13/JavaGuide/</url>
      
        <content type="html"><![CDATA[<h1 id="基础概念与常识"><a href="#基础概念与常识" class="headerlink" title="基础概念与常识"></a>基础概念与常识</h1><h2 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h2><ol><li><p>面向对象</p></li><li><p>支持网络编程并且很方便</p><blockquote><p>网络编程：编写运行在多个设备的程序，这些设备都通过网络连接起来。</p></blockquote></li><li><p>支持多线程</p></li></ol><h1 id="JVM-amp-JDK-amp-JRE"><a href="#JVM-amp-JDK-amp-JRE" class="headerlink" title="JVM &amp; JDK &amp; JRE"></a>JVM &amp; JDK &amp; JRE</h1><p>JVM（Java虚拟机）：是运行Java字节码的虚拟机，针对不同系统有特定的实现，目的在于使用相同的字节码，给出相同的结果，从而实现“一次编译，随处可以运行”。</p><p>JDK（Java Development Kit）：字面意思上就是开发工具包，包括JRE，编译器（javac）和工具，能够创建和编译Java程序。是程序员开发的环境。</p><p>JRE：Java运行时的环境，是运行编译好的Java程序所需的所有内容的集和。</p><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>在Java中，JVM可以理解的代码就叫做字节码（.class文件），它只面向虚拟机。</p><h1 id="Java变量类型"><a href="#Java变量类型" class="headerlink" title="Java变量类型"></a>Java变量类型</h1><p>Java语言支持的变量类型有：局部变量、成员变量、静态变量、参数变量</p><p>局部变量：定义在方法、构造方法或代码块中的变量，使用前必须声明，不能被访问修饰符修饰。</p><blockquote><ol><li>声明在方法、构造方法和代码块中，随方法、构造方法和代码块运行时被创建，运行结束后销毁。</li><li>不用访问修饰符修饰，因为作用域就限制在方法、构造方法和代码块中。只在声明它的方法、构造方法和代码块中可见，不能被其他方法或代码块访问。</li><li>局部变量在栈上分配的，没有默认值，声明后必须初始化才能使用。</li></ol></blockquote><p>成员变量：定义在类中、方法外的变量，作用域为整个类，可以被类中任何方法、构造方法、代码块访问。可以被访问修饰符修饰。</p><blockquote><ol><li>成员变量具有默认值，也可以在构造方法中指定。</li></ol></blockquote><p>静态变量：定义在类中、方法外的变量，使用static关键词修饰，作用域为整个类，可以被类中任何方法、构造方法、代码块访问。在程序运行期间无论创建多少个对象，在内存中只有一个副本，静态变量可被访问修饰符修饰。</p><blockquote><ol><li>也叫类变量，指在类中被定义的变量，被一个类所共享而不与实例相关。无论是否有对象实例化、有几个对象，内存中的静态变量只有一份。</li><li>静态变量在类加载时创建，在整个程序运行期间都存在。</li><li>与常量差别。常量被final关键字修饰，一旦赋值就不能在程序中再更改，静态变量的值可以改变。因此常量存储固定值，静态变量存储可变数据。</li><li>线程安全性：多个线程同时访问一个包含静态变量的类时，需要考虑进程安全性。</li></ol></blockquote><p>参数变量：方法定义时声明的变量，作为调用该方法时传递给方法的值。</p><blockquote><p>参数变量传递值的方式有以下两种：</p><ol><li>值传递：基本数据类型采用该方法传递参数变量的值。传递的实质上是参数的值的副本，在方法中对参数变量进行更改，只会修改副本的值，不会影响原始值。</li><li>引用传递：对象类型采用该方法传递参数变量的值。传递的是参数的引用（即内存地址），在方法中改变参数的值时会修改原始值的内容。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 从0开始 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文碎片collection</title>
      <link href="/2023/04/02/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/04/02/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Fake-News-Detection-FND"><a href="#Fake-News-Detection-FND" class="headerlink" title="Fake News Detection(FND)"></a>Fake News Detection(FND)</h1><h2 id="论文：CIKM-2021-假新闻有“两幅面孔”：整合模式和事实信息的虚假新闻检测"><a href="#论文：CIKM-2021-假新闻有“两幅面孔”：整合模式和事实信息的虚假新闻检测" class="headerlink" title="论文：CIKM 2021 | 假新闻有“两幅面孔”：整合模式和事实信息的虚假新闻检测"></a>论文：CIKM 2021 | 假新闻有“两幅面孔”：整合模式和事实信息的虚假新闻检测</h2><p>作者：盛强</p><p>讲解文章：<a href="https://zhuanlan.zhihu.com/p/414464291">https://zhuanlan.zhihu.com/p/414464291</a></p><p>背景：</p><p>  FND通用两种方法，一种主要利用内容, 一种利用社交信息（如用户信息、群众反馈、传播模式等） 。本文主要关注前者方法。利用内容的方法可大致分为：</p><p>  基于模式：找到假新闻内容的共性模式（shared patterns），期望这些共性模式可以泛化到没有见过的假新闻上。 </p><p>  基于事实信息： 引入了外部知识源， 通过检索并参考一些“证据”来判断给定的新闻的真实性。 </p><p>Thought：</p><p>  <strong>两种方法具有互补性，可以结合在一起使用。</strong></p><p>  <strong>难点一是怎么结合让性能upup，二是避免过于模式化判断</strong></p><img src="C:\Users\Hailey\AppData\Roaming\Typora\typora-user-images\1680438110712.png" alt="1680438110712" style="zoom: 50%;" /><p>Method：</p><p>  通过异构动态图卷积网络（Heterogeneous Dynamic GCN）生成<strong>词项级</strong>模式偏好分布（Pattern Preference Map）和事实偏好分布（Fact Preference Map）；</p><p>  使用生成的分布引导对应偏好的检测模型。</p><p>  模型输出的偏好感知特征最终被融合，用于预测给定帖子是否是虚假新闻。 </p><p>Method Detail:</p><ol><li><p>训练集偏差难免对模型进行干扰，如何避免：让模型自己端到端托管学习以外，加入先验知识。</p></li><li><p>新闻中的风格词能够体现模式信息（表达风格，情感）， 而事实信息的体现更加直接：一个可以验证的说法一般都含有实体词 。故将新闻分为风格词、实体词、其他词。</p></li><li><p>基于上述三个集合，我们需要做到：</p></li></ol><p>   （1）根据风格词和实体词，为其它词生成偏好得分；</p><p>   （2）根据语境调整所有词项的偏好得分。</p><p>   为做到上述两点，我们需要让文本中所有词项与其它词项尽可能产生联系和交互。此时想到了图神经网络：将词项作为结点，边权就可以代表词项之间联系的紧密程度。</p><p>   如果边权是动态可学习的，那么这种紧密程度就可以根据语境进行调整（所以是动态图结构）。此外，我们希望风格词和实体词在交互中能“知晓并保持自身身份”，需要把分组信息体现在图上学习中。 </p><ol start="4"><li>关于图的初始化：使用Bert获取了词项表达，用于初始化节点表示 。</li></ol><h2 id="研讨：应用问题研究的三个视角"><a href="#研讨：应用问题研究的三个视角" class="headerlink" title="研讨：应用问题研究的三个视角"></a>研讨：应用问题研究的三个视角</h2><p>三个视角：</p><ol><li>往回看，历史研究中找启发</li><li>往深看，重新审视基础加沙</li><li>往外看，在变化中发现需求</li></ol><p>历史视角：调研超级早期文献，看到近期文献没有相关技术</p><p>理论视角：一个问题要引入A技术</p><ol><li>重要性：A重要吗，为什么重要？</li><li>本质性：A的基础假设是什么</li><li>独特性：A为什么尚未被考虑，有已知的替代品吗</li><li>有效性：A提供了什么?</li><li>···</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2023/03/23/Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/03/23/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础第一轮"><a href="#Java基础第一轮" class="headerlink" title="Java基础第一轮"></a>Java基础第一轮</h1><ol><li><p>重载与重写</p><blockquote><p>重载Overload：指同一类中，名字相同而参数不同的方法。被重载的方法必须改变参数列表。</p><p>重写Override：子类重写父类的方法，外壳不变核心重写。当在子类中要调用父类被重写的方法时，使用<code>super</code>关键字。</p><p>重载是一个类中多态的体现，重写是子类与父类之间多态的体现。</p><p>重写时修饰符可以扩大不可以缩小，抛出的异常可以缩小但是不可以扩大。</p></blockquote></li><li><p>不能被重写</p><blockquote><p>static：静态方法属于类，不属于实例</p><p>final：在常量池中</p><p>private：私有的方法不能被重写</p></blockquote></li><li><p>this与super</p><blockquote><p><code>this</code>可理解为指向自身（对象）的引用。</p><p><code>super</code>可理解为指向父类的引用。</p><p>分别调用本类和父类的方法、属性、构造函数。</p><p>均放在构造函数第一行。</p></blockquote></li><li><p>访问控制权限</p><blockquote><p><strong>访问控制权限又称为封装</strong></p><p>四个级别：public, protected, default, private</p><p>权限越来越大：同一类，同一包中的类，子类，其他包中的类</p></blockquote></li><li><p>多态</p><blockquote><p>封装与继承是多态的基础。</p><p>多态的条件：</p><p>继承，子类重写父类的方法，父类引用指向子类对象。</p><p>使用：虚拟方法调用。在编译时调用父类中声明的方法，但运行时执行的是子类重写父类的方法。</p><p>编译看左边，运行看右边。</p><p><code>Person p = new man();</code></p><p>注：上条代码-&gt;内存中是存在子类特有的变量和方法的，但因为变量声明为父类型，导致编译时只能调用父类中声明的属性和方法。</p><p>子类的属性和方法不能被调用。若想调用子类的···，需要向下转型的强制转换。</p></blockquote></li><li><p>组合</p><blockquote><p>就是在一个类中引用另一个类的对象作为成员。</p><p>规则：多用组合，少用继承。</p><p>组合为has-a松耦合，而继承为is-a紧耦合。</p></blockquote></li><li><p>static</p><blockquote><p>修饰变量–静态变量：运行时只为静态变量分配一次内存，可被类的所有实例共享，节省内存。</p><p>修饰成员方法–静态方法</p><p>静态代码块：将只需要进行一次的初始化操作放在其中。</p></blockquote></li><li><p>final</p><blockquote><p>修饰类，表明这个类不能被继承。</p><p>修饰方法，表示这个方法不能被重写。</p><p>修饰变量：修饰基本数据类型，表示其值不能更改。修饰引用类型，表示初始化后不能再让其指向另一个对象。</p></blockquote></li><li><p>接口和抽象类</p><blockquote><p>接口中只提供方法的定义而没有实现。</p><p>接口的实现类中必须实现接口的全部方法，否则应定义为抽象类。</p></blockquote></li><li><p>数据结构</p></li><li><p>关于类型转换</p><blockquote><p>基本数据类型转换时，</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题记录</title>
      <link href="/2023/03/13/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
      <url>/2023/03/13/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><blockquote><p>二分查找框架</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">        &#123;</span><br><span class="line">            ···</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ···</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>扩展：二分查找左右边界，需要扩展区间</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, n = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//找左边界</span></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = n;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">            &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left == n || nums[left] != target)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        a = left;</span><br><span class="line">        <span class="comment">//找右边界</span></span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = n;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">            &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        b = left - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> b-a+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><blockquote><p>双指针问题：快慢指针</p></blockquote><p>原地修改数组问题，如原地移除数组中全部等于<code>val</code>的值。思路：<code>fast</code>在前找不等于<code>val</code>的元素赋值给<code>slow</code>，让<code>slow</code>前进一步。</p><h2 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h2><blockquote><p>双指针问题</p></blockquote><p>平方后的数组最大值只能在两端，初始化新数组为空设指针在尾端，原数组平方后左右设置双指针比较大小。</p><p>暴力解法：平方后排序，复杂度 O(n + nlog n) 。</p><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++后端题目</title>
      <link href="/2023/03/12/C++%E5%90%8E%E7%AB%AF%E9%A2%98%E7%9B%AE/"/>
      <url>/2023/03/12/C++%E5%90%8E%E7%AB%AF%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<ol><li>指针和引用的区别</li></ol><blockquote><ul><li><p>指针是对象，引用是别名。</p></li><li><p>初始化、拷贝、删除、大小。</p></li><li><p>对（指向&#x2F;引用）对象操作。</p></li></ul></blockquote><ol start="2"><li>C++中内存分配情况</li></ol><blockquote><ul><li>栈区：编译器自动创建回收，存放函数参数、局部变量。</li><li>堆区：程序员自行new malloc delete free，空间较大。</li><li>全局区（静态区）：分初始化和未初始化区，存放静态变量和全局变量。</li><li>常量区：放常量。</li><li>代码区：放二进制代码。</li></ul></blockquote><ol start="3"><li>堆和栈的区别</li></ol><blockquote><ul><li>内存分配：一个编译器负责，一个程序员负责。（堆创建的空间不回收，可能会造成内存泄漏问题）</li><li>大小限制：栈的地址是从高到低扩展，栈顶地址与栈的大小确定，并且内存连续；堆的地址从低到高，因为是内存用链表来存储，所以是不连续的内存。</li><li>存放内容：堆的头部放堆的大小，剩下的内容由程序员安排；栈在函数调用时，函数调用语句的下一条可执行语句先入栈，然后是函数的参数（从右往左入栈，保证出栈时第一个参数先出），函数的局部变量。（下一条，参数，局部变量）</li></ul></blockquote><ol start="4"><li>函数传参几种方式</li></ol><blockquote><ul><li>值传递：将实参的值拷贝给形参。对形参的操作无法影响到函数外，也就是实参。</li><li>指针传递：将实参的地址拷贝给形参，对形参的操作就是对实参地址的操作，这种操作是可以影响到函数外的，也就是可以更改实参的值。</li><li>引用传递：形参是实参的引用，对形参操作，等同于对引用对象也就是对实参操作。</li></ul></blockquote><ol start="5"><li>new&#x2F;malloc delete&#x2F;free差别</li></ol><blockquote><ul><li>new和delete是C++中操作符，malloc和free是C中的函数。</li><li>new和delete做了两件事：分配（释放）内存，调用类的构造函数（析构函数）。</li><li>malloc和free仅仅是分配和释放内存。</li></ul></blockquote><ol start="6"><li>volatile和extern关键字</li></ol><blockquote><ul><li>volatile：告诉编译器定义的变量随时可能改变，让编译器不要对这个变量进行任何的优化，每次需要读取这个变量时，直接从内存中读取，从而实现对这个地址的稳定访问。</li><li>extern：放在全局变量或函数的声明前，用来说明“函数&#x2F;变量是在别的文件中进行定义，在此处进行引用”。（不用include是因为extern能够加快程序编译，节省时间）（extern c用来声明C++中的C函数）。</li></ul></blockquote><ol start="7"><li>static关键字：控制变量存储方式和可见性</li></ol><blockquote><ul><li>修饰全局变量：修改全局变量可见性。其通常是整个工程可见（其他文件中添加extern即可），添加static让其变为仅该文件可见。</li><li>修饰局部变量：延长局部变量生命周期。该局部变量不再存储在栈中，而是静态区。e.g.：一个函数中对局部变量初始化后，再次调用跳过初始化指令，该局部变量的值是上次退出函数时局部变量的值。</li><li>修饰函数：和全局变量相同，让其变为仅该文件可见。</li><li>修饰类：<ul><li>修饰类的成员：类的静态成员属于类，不属于任何一个对象。类和所有对象都可以访问，实现数据共享。类内声明，类外定义。</li><li>修饰类的成员函数：只能访问类的静态成员。</li></ul></li></ul></blockquote><ol start="8"><li>const关键字</li></ol><blockquote><ul><li>修饰基本数据类型：const为常量限定符，修饰基本数据类型，以告诉编译器该变量是不可修改的。</li><li>修饰指针：<strong>指针常量与常量指针。</strong><ul><li>指针指向的是常量，如<code>const int *p = &amp;a</code>。不可通过指针修改指向对象的值，但是可以修改指针的指向对象。</li><li>指针本身为常量，如<code>int *const p = &amp;a</code>。可以通过指针修改指向对象的值，但是指针不可以指向其他对象。</li></ul></li><li>修饰引用</li><li>修饰函数：<ul><li>修饰函数参数：在函数体中不能对参数进行修改和<strong>输出</strong>。</li></ul></li><li>修饰类：<ul><li><strong>修饰类的成员变量</strong>：const成员变量，只在某个对象生命周期内是常量。不同对象对应的const成员变量可以有不同的值。</li><li>修饰类的成员函数：防止成员函数对类的成员变量进行改动。（相当于权限为只读，而普通的成员函数权限为读写）</li><li>修饰类的对象，定义常量对象：常量对象只能调用常量成员函数。</li></ul></li></ul></blockquote><ol start="9"><li>面向对象的三大特性</li></ol><blockquote><ul><li>封装：把客观实体的数据和对数据相关操作封装成类。可以把自己的数据和方法让信任的类或对象进行操作，对不可信的对象进行隐藏。在类内部设计不同的访问级别实现对数据的保护。</li><li>继承：是一个类型的对象获取另一个类型的对象的所有属性的方法。通过继承，可以使用现有类所有的属性、方法并进行功能的扩展，而不需要编写重复的代码部分。</li><li>多态：是从一般到特殊的过程，对不同的对象发送消息，不同的对象得到不同的反应。是通过继承加虚函数来实现的。</li></ul></blockquote><ol start="10"><li>虚函数相关</li></ol><blockquote><ul><li>多态：在基类函数前加virtual，在派生类中对该函数进行重写。创建对象并调用该函数在编译时，将根据对象的类型决定调用基类还是派生类的函数。</li><li>虚函数实现原理：当一个类中包含虚函数，编译器会自动生成虚函数表。派生类继承基类后自然有虚函数，所以也会生成虚函数表。<ul><li>在定义对象时，编译器检测到该对象类型有虚函数，会建立虚函数指针，指向对应的虚函数表。</li><li>基类类型指针指向派生类对象时调用虚函数，会根据指向对象的虚函数指针找到派生类的虚函数实现多态。</li><li>如果没有virtual定义，编译器认为不需要给多态留出额外的空间，基类中定义的函数地址就会事先被绑定。在指针调用时直接调用事先绑定的这个函数。</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AI论文精读整理</title>
      <link href="/2023/02/25/AI%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E6%95%B4%E7%90%86/"/>
      <url>/2023/02/25/AI%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="论文一：Attention-is-All-You-Need"><a href="#论文一：Attention-is-All-You-Need" class="headerlink" title="论文一：Attention is All You Need"></a>论文一：Attention is All You Need</h2><p>（就是大名鼎鼎的Transformer）</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>一般模型：encoder + （￥%#&amp;*） + decoder</p><p>Transformer：encoder + （only attention mechanism） + decoder</p><p>它的架构非常简单，仅仅使用了注意力机制, dispensing with recurrence and convolutions entirely. </p><p>带来的好处：</p><ol><li>模型简单，并且可以并行（对比时序神经网络要一个字一个字的往外蹦）。</li><li>使用注意力机制，每次可以关注到任何一个部分（对比卷积神经网络，要卷积很多层）。</li></ol><h3 id="Model-Architecture"><a href="#Model-Architecture" class="headerlink" title="Model Architecture"></a>Model Architecture</h3><h4 id="Encoder与Decoder"><a href="#Encoder与Decoder" class="headerlink" title="Encoder与Decoder"></a>Encoder与Decoder</h4><p>encoder：输入序列 -&gt; 向量表示序列</p><p>decoder：向量表示序列 -&gt; 输出序列</p><p>（注意：输入序列与输出序列不一定等长）</p><p>二者的不同在于：</p><p>Encorder中，每个阶段，注意力层都可以访问句子中的每个单词。（称为自动编码模型）</p><p>而Decoder中的每个阶段，注意力层只能访问给定单词在句子中之前位置的单词。（因为是一个一个生成的，称为自回归模型）</p><p>如何实现这种不同的：在decoder中的注意力层有掩码（Masked），让decoder看不到当前字符后面的字符。</p><h4 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h4><p>针对每个key，输入一个value与之对应。</p><p>value如何计算：根据不同的query，算出query与每个key的相似度，即为value。</p><p>最终的output：由value组成的加权和。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode</title>
      <link href="/2023/02/24/leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/02/24/leetcode-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h1><p>这题属于二刷（多刷？记不清了），梦开始的地方。但是之前都很懵懂，这次再打开这道题时，用哈希表的想法直接弹到脑门上。</p><p>但是我的写法是：使用map，第一次循环建立哈希表，第二次循环遍历每个元素寻找<code>target-nums[i]</code>。</p><p>这样做的结果是，无法解决重复数问题。查了查发现map无法存储重复的键值，unordered_map亦然。</p><p>打开题解研究了很久，又看了评论，最后豁然开朗：</p><p>只使用一次循环，先判断哈希表中是否有<code>target-nums[i]</code>，若有则直接返回下标。</p><p>再将m[nums[i]]更新，避免找到自己。</p><p>另一种暴力解法也值得一提，就是用双循环嘛，如何避免找到自己呢？</p><p>我最开始简单的想用if判定，题解中更高明：直接从i后面开始第二次循环。</p><p>原因在于：i前面的元素，已经与i匹配过了。就这么简单。</p><p>脑袋转过弯来很重要 &#x2F;(ㄒoㄒ)&#x2F;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = m.<span class="built_in">find</span>(target - nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(it != m.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;it-&gt;second, i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            m[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h1><p>使用的数据结构为链表，生疏的很啊。</p><p>逻辑比较容易想，只是有几处细节没有照顾到：</p><ol><li><p>两个链表长度不一样，我处理的特别复杂。</p><p>考虑到题目特点，若l1为空，置该值为0即可。并在最后指针向后一位时判断其是否为空，不空则移位。</p></li><li><p>本题每个节点只能存一位数字，所以我的flag只设为0和1，若sum超过10则减去10。</p><p>但是可以有更普适的写法：flag &#x3D; sum&#x2F;10，sum&#x3D;sum%10。</p></li><li><p>对链表节点的声明太生疏。想要创建一个链表不断添加结果，要弄一个头指针一个尾指针。参考如下写法：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ListNode *head=<span class="literal">nullptr</span>,*tail=<span class="literal">nullptr</span>;<span class="comment">//要初始化的</span></span><br><span class="line"><span class="comment">//要添加元素时</span></span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(value);</span><br><span class="line">    tail = head;<span class="comment">//注意这里tail要等于head，而非head下一个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    tail-&gt;next = <span class="keyword">new</span> <span class="built_in">listNode</span>(value);</span><br><span class="line">    tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后一位也许还会有进位，需要顾及到flag最后是否为0。</p></li><li><p>有递归写法的呀，因为加法操作是重复的。</p></li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* head = <span class="literal">nullptr</span>, * tail = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 || l2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> n1 = l1 ? l1-&gt;val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> n2 = l2 ? l2-&gt;val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> sum = n1 + n2 + flag;</span><br><span class="line">            flag = sum / <span class="number">10</span>;</span><br><span class="line">            sum = sum % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(sum);</span><br><span class="line">                tail = head;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tail-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(sum);</span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (l1)l1 = l1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (l2)l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) tail-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(flag);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递归写法为：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">add</span>(l1, l2, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">add</span><span class="params">(ListNode* l1, ListNode* l2, <span class="type">int</span> flag)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">nullptr</span> &amp;&amp; l2 == <span class="literal">nullptr</span> &amp;&amp; flag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;<span class="comment">//递归问题不要忘记base line</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = flag;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l1)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += l1-&gt;val;</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += l2-&gt;val;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = sum / <span class="number">10</span>;</span><br><span class="line">        sum = sum % <span class="number">10</span>;</span><br><span class="line">        ListNode* node = <span class="keyword">new</span> <span class="built_in">ListNode</span>(sum);</span><br><span class="line">        node-&gt;next = <span class="built_in">add</span>(l1, l2, flag);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>TBC..</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL整理</title>
      <link href="/2023/02/23/STL%E6%95%B4%E7%90%86/"/>
      <url>/2023/02/23/STL%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>粘贴的前言：</p><p><strong>标准模板库 STL</strong>（Standard Template Library），是 C++ 标准库的一部分，不需要单独安装，只需要#include 头文件。</p><p>C++ 对模板（Template）支持得很好，STL 就是借助模板把常用的数据结构及其算法都实现了一遍，并且做到了<strong>数据结构和算法的分离</strong>。</p><p> STL封装了很多实用的容器，省时省力，能够让你将更多心思放到解决问题的步骤上，而非费力去实现数据结构诸多细节上，<strong>像极了用python时候的酣畅淋漓</strong>。 </p><hr><h2 id="vector（叫做矢量的变长数组）"><a href="#vector（叫做矢量的变长数组）" class="headerlink" title="vector（叫做矢量的变长数组）"></a>vector（叫做矢量的变长数组）</h2><ol><li><p>定义：向定义变量一样定义vector</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; name;</span><br><span class="line">vector&lt;<span class="keyword">struct</span> node&gt; name;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; name;</span><br><span class="line"><span class="comment">//定义高维数组时记住，低维是高维的地址</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">2</span>];<span class="comment">//3行2列</span></span><br><span class="line">cout&lt;&lt;arr[<span class="number">0</span>]&lt;&lt;endl;<span class="comment">//打印第一行</span></span><br><span class="line">cout&lt;&lt;arr[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;arr[<span class="number">2</span>]&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li><li><p>vector内元素的访问：使用下表或迭代器</p><p>迭代器可理解为指针：<code>vector&lt;类型&gt;::iterator 变量名</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">5</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">auto</span> it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>常用函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">push_back</span>();<span class="comment">//末尾插入</span></span><br><span class="line"><span class="built_in">pop_back</span>();<span class="comment">//末尾删除</span></span><br><span class="line"><span class="built_in">size</span>();<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">insert</span>();<span class="comment">//指定位置插入函数</span></span><br><span class="line"><span class="built_in">erase</span>();<span class="comment">//删除指定位置/区间（左闭右开）元素</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="pair：关联式容器之一"><a href="#pair：关联式容器之一" class="headerlink" title="pair：关联式容器之一"></a>pair：关联式容器之一</h2><blockquote><p>关联式容器存储的是键值对形式的数据。</p></blockquote><ol><li><p>多种创建pair对象的方法（#include <utility>）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pair&lt;string, <span class="type">double</span>&gt; pair1;<span class="comment">//调用默认构造函数，创建空对象</span></span><br><span class="line">pair&lt;string, string&gt;<span class="built_in">pair2</span>(<span class="string">&quot;姜雨杉&quot;</span>,<span class="string">&quot;Shika&quot;</span>);</span><br><span class="line">pair&lt;string, string&gt;<span class="built_in">pair3</span>(pair2);</span><br><span class="line">pair&lt;string, string&gt;<span class="built_in">pair4</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;宋冉&quot;</span>,<span class="string">&quot;song&quot;</span>));</span><br><span class="line"><span class="comment">//上面pair4是调用移动构造函数</span></span><br><span class="line">pair1.first = <span class="string">&quot;李瓒&quot;</span>;</span><br><span class="line">pair1.second = <span class="string">&quot;azan&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>pair的比较规则：先比较key，再比较value</p></li></ol><h2 id="map：存储的都是pair对象"><a href="#map：存储的都是pair对象" class="headerlink" title="map：存储的都是pair对象"></a>map：存储的都是pair对象</h2><blockquote><p>map会根据key的大小而自动排序。</p></blockquote><ol><li><p>map的排序规则：默认为<code>less&lt;T&gt;</code>(T表示键的数据类型)升序排序，排序规则也可手动指定。</p></li><li><p>千古难题解决了，map不可使用sort进行排序，欲对其中value排序，可转为vector。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SortBySecond</span><span class="params">(<span class="type">const</span> pair&lt;string, <span class="type">int</span>&gt;&amp; left, <span class="type">const</span> pair&lt;string, <span class="type">int</span>&gt;&amp; right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> left.second &lt; right.second;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;pair&lt;string, <span class="type">int</span>&gt;&gt; <span class="built_in">v</span>(m.<span class="built_in">begin</span>(), m.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(),SortBySecond);</span><br></pre></td></tr></table></figure></li></ol><p>TBC..</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>论文单词盘点</title>
      <link href="/2023/02/23/%E8%AE%BA%E6%96%87%E5%8D%95%E8%AF%8D%E7%9B%98%E7%82%B9/"/>
      <url>/2023/02/23/%E8%AE%BA%E6%96%87%E5%8D%95%E8%AF%8D%E7%9B%98%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>前言：在这篇中整理论文中遇到的英文生词以及涉及到的专业知识内容，一是希望自己养成记录的好习惯，二是希望自己常温习，常知新。</p><hr><h2 id="论文一DOI：-10-48550-x2F-arxiv-2203-13064"><a href="#论文一DOI：-10-48550-x2F-arxiv-2203-13064" class="headerlink" title="论文一DOI： 10.48550&#x2F;arxiv.2203.13064"></a>论文一DOI： 10.48550&#x2F;arxiv.2203.13064</h2><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><p>ensemble 全体，整体，合奏</p><p>ensembling 词典中似乎没有这个词，普遍翻译为“集成”</p><p>Model Ensemble 模型集成：融合多个训练好的模型，达到取长补短的效果，提高最终模型的泛化能力；这些模型一般为差异大、相关度小。</p><p>synthetic datasets 人工数据集</p><p>cutting-edge 尖端的</p><p>configuration 结构，配置，构造</p><p>E.G.：···with a focus on ensembling of recent cutting-edge Transformer-based encoders in Large configurations.</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>morphology 词法</p><p>inference（推理，推断，推论） speed 推断速度</p><p>intensive（密集的，彻底的） research 深入研究</p><p>E.G.：The GEC task is complicated and challenging: the accuracy of edits, inference speed, and memory limitations are topics of intensive research.</p><p>mainstream approach 主流方法，主流思想</p><p>gated recurrent neural networks 门控循环神经网络</p><p>recurrent 不断发生的，循环的</p><p>autoregressive 自回归</p><p>adopt 采用</p><p>E.G.：···adopted several strategies of BERT usage for GEC.</p><p>state-of-the-art 最先进的</p><p>cast 应该理解为把···变成（强制的）</p><p>E.G.：···casts text generation to text edits task.</p><p>Iterative 迭代的</p><p>E.G.：···iteratively refines predictions （优化预测）to capture dependencies.</p><h3 id="Base-System-Overview"><a href="#Base-System-Overview" class="headerlink" title="Base System Overview"></a>Base System Overview</h3><p>overview 概述，概览</p><p>To date 迄今为止</p><p>benchmark 基准为题，以··为基准的测试</p><p>primary 初级的</p><p>express 表达</p><p>E.G.：···changing the verb form to express a different number or tense（时态）</p><p>empirically 根据经验</p><h3 id="Our-System’s-Design"><a href="#Our-System’s-Design" class="headerlink" title="Our System’s Design"></a>Our System’s Design</h3><p>out-off-the-box 开箱即用</p><p>custom 风俗，习惯 adj 定制的</p><p>implement 实施，实现</p><p>E.G. custom implement 自定义实现</p><p>warm-up training 热身训练</p><p>coarse 粗糙的，粗略的</p><p>E.G.：coarse fine-tune 粗略的微调</p><p>E.G.：Datasets are used sequentially with no shuffling.（数据集按顺序使用，无需打乱shuffle）</p><p>inference tweak 推理调整</p><p>tradeoff 权衡，协调</p><p>E.G.：tradeoff between coverage and model quality.</p><p>reproduce 再现，复现</p><p>aggregation 聚合，集合</p><p>retain 保持，保留</p><p>E.G.：···and retain only those which have most of the votes from the ensemble.</p><p>denote 标志</p><p>is capable of 能够</p><p>to the best of our knowledge 据我们所知</p><p>It is worth noting that 值得一提的是</p><p>scheme 计划，方案，体系</p><p>E.G.：reproduce training scheme</p><h2 id="论文二DOI：-10-18653-x2F-v1-x2F-2020-bea-1-16"><a href="#论文二DOI：-10-18653-x2F-v1-x2F-2020-bea-1-16" class="headerlink" title="论文二DOI： 10.18653&#x2F;v1&#x2F;2020.bea-1.16"></a>论文二DOI： <a href="http://dx.doi.org/10.18653/v1/2020.bea-1.16">10.18653&#x2F;v1&#x2F;2020.bea-1.16</a></h2><p>decompose 分解</p><p>recover 恢复，复原</p><p>preprocessing 预处理</p><p>alignment 对齐</p><p>E.G.：we can’t use these span-level alignments.</p><p>take into account that···  考虑到···</p><p>Levenshtein distance （两个字符之间的）编辑距离</p><p>E.G.：Limiting the number of iterations speeds up the overall pipeline while trading off qualitative performance. 限制迭代次数加速了总体的管道速度，但同时也牺牲了模型性能。</p><p>Cumulative 累积的</p><h2 id="论文三：Attention-is-All-You-Need"><a href="#论文三：Attention-is-All-You-Need" class="headerlink" title="论文三：Attention is All You Need"></a>论文三：Attention is All You Need</h2><p>convolutional 卷积</p><p>E.G.：···<strong>dispensing with</strong> recurrence and convolutions entirely. 完全没有用到循环或卷积</p><hr>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记之动态规划</title>
      <link href="/2023/02/20/%E7%AE%97%E6%B3%95%E4%B9%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2023/02/20/%E7%AE%97%E6%B3%95%E4%B9%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><ol><li><p>要点：重叠子问题，最优子结构，状态转移方程</p></li><li><p>时间复杂度算法：一次递归时间 * 递归调用次数</p></li><li><p>斐波那契问题</p><p>暴力求解：画出递归树，发现有过多重叠子问题，时间复杂度过高。</p><p>利用备忘录记录子问题：对递归树进行剪枝，使其变成链式结构。</p><p>dp数组迭代算法：与备忘录类似，只不过备忘录是自顶向下，dp是自底向上。</p><p>dp数组的优化：当前值只和前两个值相关，可以迭代的更新这三个值，而不需要借用大小为n的数组。</p></li><li><p>凑零钱问题</p><p>如何确定是动态规划问题？因为它有最优子结构（能通过子问题的最值得到原问题的最值，且子问题相互独立）。</p><blockquote><p>步骤：确定base case，确定状态，确定选择，明确dp</p></blockquote><p>base case：终止条件，amount&#x3D;0时</p><p>状态：原问题和子问题中会变化的量，随着硬币的选择，目标金额逐渐减少，故状态为amount</p><p>选择：导致状态产生变化的行为，即选择的硬币的面值</p><p>dp函数：一般函数的参数为状态，返回的值是选择（需要计算的量）</p><p>函数dp(n)表示：目标金额为n时所需的最小硬币数量</p><p>暴力破解思路：写base case，计算子问题的结果，子问题无解则跳过，在子问题中选择最优解然后加一。</p><p>备忘录思路：声明备忘录初始值为-666代表未计算，写base case，查备忘录，计算子问题，子问题无解则跳过，选择最优解加一，存入备忘录。</p><p>dp数组迭代法：dp[i]表示，目标金额为i时所需最少硬币个数。</p></li><li><p>最长递增子序列问题</p><blockquote><p>dp[i]表示：以nums[i]结尾的最长递增子序列长度。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记</title>
      <link href="/2023/01/24/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/24/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>（来源：Primer C++第五版, 以及Cherno的视频）</p><p>此篇用于整理一些C++的基础碎片知识，随着刷题不断更新（用贪心算法女娲补天）。</p><p>好好学习，不然找不到工作 orz 。</p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>引用即别名</p></blockquote><p>通过将声明符写作<code>&amp;d</code>的形式来定义引用类型。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> &amp;refVal = ival; <span class="comment">// refVal指向ival（是ival的另一个名字）</span></span><br></pre></td></tr></table></figure><p>注：</p><p><strong>引用必须被初始化</strong>：引用一经初始化，将与对象一直绑定在一起，无法更改。</p><p><strong>引用并非对象</strong>：它只是别名。对其所有操作都是在与其绑定的对象上进行的。</p><p><strong>不能定义引用的引用</strong>：因为引用的初始值必须是一个对象，而引用不是对象。</p><p><strong>引用从一而终</strong>：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>&amp; ref = a;<span class="comment">//ref为a的引用</span></span><br><span class="line">ref = b;<span class="comment">//并不是指ref又引用了b，而是使ref引用的a值，等于b的值；</span></span><br><span class="line"><span class="comment">//a=8,b=8</span></span><br></pre></td></tr></table></figure><p>更改指针指向的对象：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* ref = &amp;a;</span><br><span class="line">*ref=<span class="number">2</span>;<span class="comment">//a=2</span></span><br><span class="line">ref = &amp;b;<span class="comment">//ref重新指向b</span></span><br><span class="line">*ref = <span class="number">3</span>;<span class="comment">//b=3</span></span><br></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><blockquote><p>与引用同为复合类型，都实现了对其他对象的间接访问。</p></blockquote><p>与引用不同之处在于：无需在定义时赋值，指针本身是对象。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> dval;</span><br><span class="line"><span class="type">double</span> *pd = &amp;dval; <span class="comment">// pd初始值为double型对象dval的地址</span></span><br><span class="line"><span class="type">double</span> *pd2 = pd; <span class="comment">// pd2初始值为指向double型对象的指针</span></span><br></pre></td></tr></table></figure><p><code>&amp;dval</code>表示取对象的地址而非引用，因为引用不是对象，没有地址。</p><p>若指针已指向一个对象，可使用解引用符号<code>*</code>来访问它或对其赋值。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;ival;</span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">// *p得到p所指对象，输出42</span></span><br><span class="line">*p = <span class="number">0</span>; <span class="comment">// 对p所指对象复制，ival=0</span></span><br><span class="line">*q = <span class="literal">nullptr</span>; <span class="comment">// 定义空指针，可初始化为nullptr或0</span></span><br></pre></td></tr></table></figure><p><code>void*</code>是一种特殊的指针类型，可以存放任意类型对象的地址。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> obj = <span class="number">3.14</span>, *pd = &amp;obj;</span><br><span class="line"><span class="type">void</span> *pv = &amp;obj;</span><br><span class="line">pv = pd;</span><br></pre></td></tr></table></figure><p><strong>指向指针的引用：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">int</span> *&amp;r = p; <span class="comment">//r是对指针p的引用</span></span><br><span class="line"></span><br><span class="line">r = &amp;i; <span class="comment">//r为p的别名，其实就是让p指向i</span></span><br><span class="line">*r = <span class="number">0</span>; <span class="comment">//解引用r得到i，将i值改为0</span></span><br></pre></td></tr></table></figure><p>如何辨别<code>r</code>的定义，找到与<code>r</code>最近的符号，<code>&amp;</code>就是引用，<code>*</code>就是指针。</p><h2 id="※数组"><a href="#※数组" class="headerlink" title="※数组"></a>※数组</h2><blockquote><p>数组大小固定，vector大小可更改。</p></blockquote><p><strong>定义和初始化：</strong>形如<code>a[d]</code>，其中维度必须是常量表达式。并且定义数组时必须指定类型。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *parr[<span class="number">30</span>]; <span class="comment">// 含有30个整型指针的数组</span></span><br></pre></td></tr></table></figure><p><strong>显示初始化：</strong></p><p>通过列表初始化时可以忽略维度。</p><p>若初始值总数量 &gt; 维度，则报错。若总数量 &lt; 维度，剩下的值初始化成默认值。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> sz = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> ial[sz] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">//维度为3</span></span><br><span class="line"><span class="type">int</span> a2[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">//维度为3</span></span><br><span class="line"><span class="type">int</span> a3[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">//后两位默认为0</span></span><br><span class="line"><span class="type">int</span> a5[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">//报错。这是不允许的</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a1[] = &#123;<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> a2[] = &#123;<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> a3[] = <span class="string">&quot;C++&quot;</span>; <span class="comment">//字符数组可以用字符串字面值初始化</span></span><br><span class="line">string a4[] = &#123;<span class="string">&quot;look&quot;</span>, <span class="string">&quot;at&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>注：数组不允许拷贝和赋值</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> a2[] = a;<span class="comment">//错误，不允许使用一个数组初始化另一个数组</span></span><br><span class="line">a2 = a;<span class="comment">//错误，不能把一个数组直接赋给另一个数组</span></span><br></pre></td></tr></table></figure><p><strong>理解复杂的数组声明：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *ptrs[<span class="number">10</span>]; <span class="comment">//大小为10，存放整型指针</span></span><br><span class="line"><span class="comment">//从右向左看：ptrs是大小为10的数组；存放类型为int*</span></span><br><span class="line"><span class="type">int</span> &amp;refs[<span class="number">10</span>];<span class="comment">//错误，不存在引用的数组！</span></span><br><span class="line"><span class="built_in">int</span> (*parray)[<span class="number">10</span>] = &amp;arr; <span class="comment">//parray指向一个包含10个整型的数组</span></span><br><span class="line"><span class="comment">//先拆括号，parray是指针；</span></span><br><span class="line"><span class="comment">//从右向左看：指针指向大小为10的数组，存放int型</span></span><br><span class="line"><span class="built_in">int</span> (&amp;arrRef)[<span class="number">10</span>] = arr; <span class="comment">//arrRef是个引用！</span></span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><table><thead><tr><th align="center">~</th><th align="center">位取反</th></tr></thead><tbody><tr><td align="center">&lt;&lt;</td><td align="center">左移</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移</td></tr><tr><td align="center">&amp;</td><td align="center">位与</td></tr><tr><td align="center">^</td><td align="center">位异或</td></tr><tr><td align="center">|</td><td align="center">位或</td></tr></tbody></table><h2 id="※函数指针"><a href="#※函数指针" class="headerlink" title="※函数指针"></a>※函数指针</h2><blockquote><p>函数指针指向的是函数而非对象。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">lengthCompare</span><span class="params">(<span class="type">const</span> string &amp;, <span class="type">const</span> string &amp;)</span></span>;</span><br><span class="line"><span class="comment">// 函数的类型取决于返回值和形参的类型。</span></span><br><span class="line"><span class="comment">// 该函数的类型为 bool(const string &amp;, bool const string &amp;)</span></span><br><span class="line"><span class="comment">// 要想声明一个指向该函数的指针，只需要用指针替换函数名</span></span><br><span class="line"><span class="built_in">bool</span> (*pf) (<span class="type">const</span> string &amp;, <span class="type">const</span> string &amp;);</span><br></pre></td></tr></table></figure><p>辨别函数指针：</p><p><code>pf</code>左侧有<code>*</code>，说明<code>pf</code>为指针；</p><p>右侧有形参列表，说明该指针是函数指针；</p><p>左侧看到指向的函数返回类型为布尔值。</p><p><strong>注：<code>*pf</code>两端的括号必不可少，否则pf是一个返回值为布尔指针的函数。</strong></p><p>使用函数指针：</p><blockquote><p>当把函数名作为值使用时，该函数自动转换成指针。</p><p>可以直接使用函数指针调用函数而无需解引用。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pf = lengthCompare;</span><br><span class="line">pf = &amp;lengthCompare;<span class="comment">// 二者等价，取址符可有可无。</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> b1 = <span class="built_in">pf</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line"><span class="type">bool</span> b2 = <span class="built_in">lengthCompare</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line"><span class="type">bool</span> b3 = (*pf)(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;goodbye&quot;</span>); <span class="comment">// 三者等价</span></span><br></pre></td></tr></table></figure><p>重载函数的指针：</p><p>使用重载函数时，必须清楚的界定使用的是哪个函数。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ff</span><span class="params">(<span class="type">int</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ff</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="built_in">void</span> (*pf) (insigned <span class="type">int</span>) = ff;</span><br></pre></td></tr></table></figure><h2 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h2><blockquote><p>利用<code>new</code>和<code>delete</code>管理动态内存</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用new分配内存，会返回指向该对象的指针。</span></span><br><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1024</span>);<span class="comment">//值初始化为1024，若括号中没有值则初始化为0</span></span><br><span class="line"><span class="comment">//动态分配的对象默认初始化，类类型对象将调用构造函数初始化</span></span><br><span class="line"><span class="comment">//p为栈上的指针，指向堆上对应的内存块。</span></span><br></pre></td></tr></table></figure><h2 id="内联函数和constexpr函数"><a href="#内联函数和constexpr函数" class="headerlink" title="内联函数和constexpr函数"></a>内联函数和constexpr函数</h2><blockquote><p>内联函数可避免函数调用的开销</p></blockquote><p>声明内联函数：在返回类型前加<code>inline</code>关键字，如：</p><p><code>inline const string&amp; shorterString(const string&amp;, const string&amp;);</code></p><p>内联说明只是向编译器发出的请求，编译器可以选择忽略。</p><p>内联函数用于优化体量小，流程直接，频繁调用的函数。</p><p><strong>内联函数与宏：</strong></p><ol><li>宏定义不是函数，在预编译时将宏名替换成宏体（函数体）。内联函数是在编译时进行代码插入。</li><li>宏定义不做类型检查，内联函数会进行类型检查。</li><li>二者都是使用的时候进行代码展开，一个在预编译，一个在编译阶段。</li></ol><p>constexpr函数是指能由于常量表达式的函数，这种函数的返回类型和形参必须都是字面值类型。</p><h2 id="STL容器：priority-queue优先队列"><a href="#STL容器：priority-queue优先队列" class="headerlink" title="STL容器：priority_queue优先队列"></a>STL容器：priority_queue优先队列</h2><blockquote><p>队列遵循FIFO原则，而优先队列根据优先级弹出元素。</p></blockquote><p> <a href="https://www.nhooo.com/cpp/priority-queue-in-cpp.html">c++ 优先队列(priority_queue) - 基础教程在线 (nhooo.com)</a> </p><p>定义： <code>priority_queue&lt;Type, Container, Functional&gt;</code> </p><p><code>Type</code>是数据类型，<code>Container</code>是容器类型，<code>Functional</code>是比较方式。</p><p><code>stsort(a,b)</code>，返回0表示排列正确，如stsort(4,3)返回1，所以3应该排在4前面</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    prior_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, less&lt;<span class="type">int</span>&gt;&gt; que;</span><br><span class="line">    <span class="comment">//设置为less，大顶堆，越大优先级越高</span></span><br><span class="line">    <span class="comment">//设置为greater，小顶堆，越小优先级越高</span></span><br><span class="line">    que.<span class="built_in">push</span>(<span class="number">6</span>);</span><br><span class="line">    que.<span class="built_in">push</span>(<span class="number">99</span>);</span><br><span class="line">    que.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; que.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件和流"><a href="#文件和流" class="headerlink" title="文件和流"></a>文件和流</h2><p><iostream>提供了标准的写入流与输出流。<fstream>能提供对文件的输出与输入。</p><p>两个对象：ofstream输出文件流（生成并写入文件），ifstream输入文件流（从文件读取信息）。</p><p>文件被打开的模式：in只读，out写，binary二进制读，trunc若文件有内容则截断，app追加到文件末尾</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ofstream outfile;</span><br><span class="line">outfile.<span class="built_in">open</span>(<span class="string">&quot;file.dat&quot;</span>, ios::out | ios::trunc);</span><br><span class="line">    <span class="comment">//写入模式打开文件，若文件有内容则截断。</span></span><br><span class="line">ifstream infile;</span><br><span class="line">infile.<span class="built_in">open</span>(<span class="string">&quot;file.dat&quot;</span>, ios::in | ios::out);</span><br><span class="line"><span class="comment">//打开一个文件用于读写。</span></span><br><span class="line"><span class="comment">//file.close;</span></span><br></pre></td></tr></table></figure><p>文件位置指针：一些能够重新定位文件位置指针的函数。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">fileObject.<span class="built_in">seekg</span>(n);<span class="comment">//定位到fillObject第n个字节</span></span><br><span class="line">fileObject.<span class="built_in">seekg</span>(n, ios::cur);<span class="comment">//当前位置后移n个大学</span></span><br><span class="line">fileObject.<span class="built_in">seekg</span>(n, ios::end);<span class="comment">//末尾位置前移n个字节</span></span><br><span class="line">fileObject.<span class="built_in">seekg</span>(<span class="number">0</span>, ios::end);<span class="comment">//定位到fileObject的末尾</span></span><br></pre></td></tr></table></figure><h2 id="STL-transform函数"><a href="#STL-transform函数" class="headerlink" title="STL transform函数"></a>STL transform函数</h2><p>将函数应用于一个序列上，并将函数对序列作用的结果保存到另外一个序列中。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">transformer</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(),data.<span class="built_in">begin</span>(),filterNonAlphabetic);</span><br><span class="line"><span class="comment">//第三个参数是用来保存的位置开头</span></span><br><span class="line"><span class="comment">//第四个参数是函数，能够对一个序列进行处理，返回一个可以保存在输出序列中的值。</span></span><br></pre></td></tr></table></figure><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><blockquote><p>函数指针本质上是将函数赋给一个变量。</p></blockquote><p>此处cherno视频讲的非常好，用代码理解特别直观，所以主要放代码。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">HelloWorld</span>();</span><br><span class="line"><span class="comment">//想把函数赋给一个变量</span></span><br><span class="line"><span class="comment">//不知道类型，暂定为auto</span></span><br><span class="line"><span class="keyword">auto</span> fun = HelloWorld;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line"><span class="comment">//不需要取址符，因为有隐式转换</span></span><br><span class="line"><span class="comment">//发现类型为void(*fun)()</span></span><br></pre></td></tr></table></figure><blockquote><p>函数指针的类型为：<code>函数返回值(* 指向函数的变量名)(函数的参数列表)</code></p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">void</span>(*fun) = HelloWorld;<span class="comment">//这种写法与上面等价，不过平常不这么写，很奇怪</span></span><br><span class="line"><span class="built_in">fun</span>();</span><br></pre></td></tr></table></figure><p>通常采取typedef声明函数指针：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*HelloWorldFunction)</span><span class="params">()</span></span>;</span><br><span class="line">HelloWorldFunction function= HelloWorld;</span><br><span class="line"><span class="built_in">function</span>();</span><br></pre></td></tr></table></figure><blockquote><p>为什么使用函数指针？可能是当函数作为另一个函数的参数时。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintValue</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ForEach</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; values, <span class="type">void</span>(*function)(<span class="type">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> value : values)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//想在这里调用函数来打印每个值</span></span><br><span class="line"><span class="built_in">function</span>(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; values = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ForEach</span>(values, PrintValue);</span><br><span class="line"></span><br><span class="line">cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里其实不必如此麻烦，因为<code>PrintValue</code>函数过于简单，可以用<code>lambda表达式</code>实现匿名函数。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; values = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ForEach</span>(values, [](<span class="type">int</span> value)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条文知识（更碎片的知识）"><a href="#条文知识（更碎片的知识）" class="headerlink" title="条文知识（更碎片的知识）"></a>条文知识（更碎片的知识）</h2><ol><li><h6 id="int-a-5-和int-a-new-int-5-的区别："><a href="#int-a-5-和int-a-new-int-5-的区别：" class="headerlink" title="int a[5]和int*a = new int[5]的区别："></a><code>int a[5]</code>和<code>int*a = new int[5]</code>的区别：</h6><p>都是分配内存，后者要判断内存是否分配成功，可用<code>delete[] a</code>释放。 </p><p>前者的内存放在栈上，可分配空间少；后者内存放于堆上，可以为非连续内存。所以分配较大内存需要用后者。</p><p>前者内存大小必须是常量，后者可以动态分配内存，不一定是常量。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* buffer = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">8</span>]; <span class="comment">//分配8个char单位，相当于创建大小为8的char数组</span></span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="number">8</span>); <span class="comment">//从buffer所指地址开始，连续8个位置设置为0</span></span><br><span class="line"><span class="keyword">delete</span>[] buffer; <span class="comment">//删除内存。</span></span><br></pre></td></tr></table></figure></li><li><p><code>C++</code>中<code>new</code>的用法：</p><p>在堆中开辟指定数据类型的空间；</p><p>调用构造函数，创建对象，并返回指向对象的指针。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> example[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span>* another = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="comment">//二者等价，只是生存期不同。</span></span><br><span class="line"><span class="comment">//前者在栈上创建，程序到达末尾花括号自动销毁</span></span><br><span class="line"><span class="comment">//后者在堆上创建，会一直活跃，需要手动销毁</span></span><br><span class="line"><span class="keyword">delete</span>[] another;</span><br></pre></td></tr></table></figure></li></ol><h6 id="3-内联函数在编译时是否做参数类型检查？"><a href="#3-内联函数在编译时是否做参数类型检查？" class="headerlink" title="3.内联函数在编译时是否做参数类型检查？"></a>3.内联函数在编译时是否做参数类型检查？</h6><p>​             是。宏不会。</p><ol start="4"><li><h6 id="引用与指针在函数中的作用："><a href="#引用与指针在函数中的作用：" class="headerlink" title="引用与指针在函数中的作用："></a>引用与指针在函数中的作用：</h6><p>（以下两个代码作用相同）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数中创建指向a的指针，直接修改内存中的数值。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Increment</span><span class="params">(<span class="type">int</span>* value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//相当于一句</span></span><br><span class="line">    <span class="comment">//int* value = &amp;a;</span></span><br><span class="line">    *value++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">Increment</span>(&amp;a);<span class="comment">//a=6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数中创建了a的引用（别名），可通过修改这个引用来直接修改a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Increment</span><span class="params">(<span class="type">int</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    value++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">Increment</span>(a);<span class="comment">//a=6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h6 id="类与结构体的区别："><a href="#类与结构体的区别：" class="headerlink" title="类与结构体的区别："></a>类与结构体的区别：</h6><p>区别仅仅在于可见性，类的可见性默认为private，结构体可见性默认为public。</p><p>但是工程上，如果简单对数据或变量进行操作用结构体，若是操纵庞大的体系，需要继承等等则用类。</p></li><li><h6 id="static："><a href="#static：" class="headerlink" title="static："></a>static：</h6><p>经过static声明的变量会存储在全局静态区，且这个变量只能在声明它的这个模块引用。</p><p>主要有面向过程和面向对象两种用法，前者针对函数和变量，后者主要在类和结构体中使用。</p><p>面向过程：静态全局变量，静态局部变量，静态函数。</p><p>面向对象：静态数据成员，静态成员函数。</p><table><thead><tr><th align="center">static用法</th><th align="center">要点</th></tr></thead><tbody><tr><td align="center">静态全局变量</td><td align="center">在声明它的整个文件可见，不能被其他文件使用</td></tr><tr><td align="center">静态局部变量</td><td align="center">只初始化一次，可以保存局部变量的值，并且使该变量只属于局部模块本身（相比全局变量）。</td></tr><tr><td align="center">静态函数</td><td align="center">在声明它的整个文件可见，不能被其他文件使用</td></tr><tr><td align="center">静态数据成员</td><td align="center">变量由所有实例共享，一变则全变，如利率</td></tr><tr><td align="center">静态成员函数</td><td align="center">只能操作静态成员</td></tr></tbody></table></li><li><h6 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h6><p>枚举数据类型是一种由程序员自己定义的数据类型，合法值为与他们关联的一组命名整数常量。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Roster</span></span><br><span class="line">&#123;</span><br><span class="line">    Sharon, Tom, John</span><br><span class="line">&#125;;</span><br><span class="line">Roster student = Sharon;</span><br></pre></td></tr></table></figure></li><li><h6 id="构造函数-amp-析构函数"><a href="#构造函数-amp-析构函数" class="headerlink" title="构造函数&amp;析构函数"></a>构造函数&amp;析构函数</h6><ol start="5"><li><p>类中的一种特殊的成员函数，在实例化对象时自动调用(或用new分配一个对象时)。</p><p>要么用户自己定义，要么编译器自动生成。</p><p>析构函数也是特殊的成员函数，会在每次删除创建的对象时执行。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">float</span> X, Y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line">X = <span class="number">0.0f</span>;</span><br><span class="line">Y = <span class="number">0.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;entity destroyed!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></li><li><h6 id="static-cast强制类型转换"><a href="#static-cast强制类型转换" class="headerlink" title="static_cast强制类型转换"></a>static_cast强制类型转换</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> a = <span class="number">1.999</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(a);</span><br><span class="line"></span><br><span class="line">streampos length = file.<span class="built_in">tellg</span>();</span><br><span class="line"><span class="function">string <span class="title">data</span><span class="params">(<span class="keyword">static_cast</span>&lt;<span class="type">size_t</span>&gt;(length), <span class="string">&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="comment">//size_t表示任何对象所能达到的最大长度</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记</title>
      <link href="/2023/01/21/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/21/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>（来源：蓝桥云课–Linux基础）</p><hr><h1 id="记在前面"><a href="#记在前面" class="headerlink" title="记在前面"></a>记在前面</h1><p>有几个技巧需要记住：</p><ol><li><p>活用重要快捷键：</p><p><code>tab</code>键：使用<code>tab</code>键可以进行命令、目录和参数的补全</p><p><code>ctrl+c</code>：强行终止当前程序，回到可控状态</p><p><code>ctrl+d</code>：退出用户或退出终端</p></li><li><p>通配符：</p><p>通配符<code>*</code>用来匹配0或多个字符，<code>？</code>用来匹配任意一个字符。</p><p>如下，可从一大堆文件中匹配出txt文件。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/shiyanlou</span><br><span class="line">touch fgh.txt agf.txt</span><br><span class="line">ls *.txt</span><br></pre></td></tr></table></figure><p>另外，在创建文件时若想一次性创建多个文件，可直接如下操作：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch love_&#123;1..10&#125;_shiyanlou.txt</span><br></pre></td></tr></table></figure></li><li><p>使用<code>man</code>命令，可以获得谋克命令的说明和使用方法。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man 1 ls</span><br></pre></td></tr></table></figure><p>1代表了一般命令区段，这样可以少显示一些。</p><p>若知道命令的作用，只需要获得某个参数的具体作用，就使用<code>--help</code>。</p></li></ol><h1 id="一些命令总结："><a href="#一些命令总结：" class="headerlink" title="一些命令总结："></a>一些命令总结：</h1><h2 id="Linux命令：对文件的基本操作"><a href="#Linux命令：对文件的基本操作" class="headerlink" title="Linux命令：对文件的基本操作"></a>Linux命令：对文件的基本操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对文件的基本操作</span></span><br><span class="line">cd ~ # 回到home目录</span><br><span class="line">touch test # touch命令用于创建空白文件</span><br><span class="line">mkdir mydir # mkdir创建空目录</span><br><span class="line">mkdir -p father/son/grandson # -p 创建多级目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp test /father/son/grandson # 使用cp命令复制一个文件到指定目录</span><br><span class="line">cp -r father family # 使用cp -r复制目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm test # rm命令删除文件</span><br><span class="line">touch test</span><br><span class="line">chmod 444 test # 给test赋予只读权限</span><br><span class="line">rm -f test # 删除只读文件时，需要-f命令强制删除</span><br><span class="line">rm -r family # 删除目录时，需要-r强制删除</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移动文件命令 <span class="built_in">mv</span> 源目录 目的目录</span></span><br><span class="line">cd ~</span><br><span class="line">mkdir Documents</span><br><span class="line">touch file1</span><br><span class="line">mv file1 Documents</span><br><span class="line">cd Documents</span><br><span class="line">mv file1 myfile # mv命令还可以对文件重命名</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件</span></span><br><span class="line">cp /etc/passwd passwd</span><br><span class="line">cat passwd # cat正序显示文件</span><br><span class="line">cat -n passwd # 显示行号</span><br><span class="line">cat /etc/group | sort</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> 用于读取指定文件内容并打印到终端输出，| <span class="built_in">sort</span>表示将读取的文本进行字典排序再输出。</span></span><br><span class="line">cat /etc/group | grep -E &quot;shiyanlou&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用grep -E 指定字符串过滤出结果</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阅读文件</span></span><br><span class="line">more passwd # 回车显示一行，空格显示一屏幕</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记--面向对象编程</title>
      <link href="/2023/01/21/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/21/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义类，创建并使用对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># __init__方法用于创建对象时进行初始化</span></span><br><span class="line">    <span class="comment"># 通过这个方法为学生对象绑定name和age两个属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, course_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s正在学习%s.&#x27;</span> % (self.name, course_name))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">watch_movie</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(self.age) &lt; <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在观看爱情电影.&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    stu1 = Student(<span class="string">&#x27;漩涡鸣人&#x27;</span>,<span class="number">13</span>)</span><br><span class="line">    stu1.study(<span class="string">&#x27;影分身之术&#x27;</span>)</span><br><span class="line">    stu1.watch_movie()</span><br><span class="line">    stu2 = Student(<span class="string">&#x27;旗木卡卡西&#x27;</span>, <span class="string">&#x27;27&#x27;</span>)</span><br><span class="line">    stu2.study(<span class="string">&#x27;神威&#x27;</span>)</span><br><span class="line">    stu2.watch_movie()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试访问可见性</span></span><br><span class="line"><span class="comment"># 如果希望属性和方法是私有的，命名时用两个下划线作为开头</span></span><br><span class="line"><span class="comment"># 但是，利用更换名字的规则仍然可以对私密属性方法进行访问</span></span><br><span class="line"><span class="comment"># 实际开发中，不建议设置私有属性，会导致子类无法访问</span></span><br><span class="line"><span class="comment"># 通常用单下划线开头，表示属性是受保护的（仅仅是表示，暗示）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, foo</span>):</span><br><span class="line">        self.foo = __foo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__foo)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test = Test(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    test.__bar() <span class="comment">#报错</span></span><br><span class="line">    <span class="built_in">print</span>(test.__foo) <span class="comment"># 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文本纠错整理</title>
      <link href="/2023/01/20/%E6%96%87%E6%9C%AC%E7%BA%A0%E9%94%99%E6%95%B4%E7%90%86/"/>
      <url>/2023/01/20/%E6%96%87%E6%9C%AC%E7%BA%A0%E9%94%99%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>整理一下过于杂乱的知识保存在此，</p><p>走一步看一步吧。</p><h1 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h1><h2 id="NLP技术发展及相关概念"><a href="#NLP技术发展及相关概念" class="headerlink" title="NLP技术发展及相关概念"></a>NLP技术发展及相关概念</h2><p>基于规则和传统的机器学习方法不再赘述，本节从深度学习开始讲起。</p><p>不过要先提一嘴传统机器学习与深度学习的差别之一：端到端。</p><h3 id="概念1：端到端"><a href="#概念1：端到端" class="headerlink" title="概念1：端到端"></a>概念1：端到端</h3><p>传统机器学习流程由多个步骤组成， 每个步骤是一个独立的任务，其结果的好坏会影响到下一步骤，从而影响整个训练的结果，这是非端到端的。</p><p>深度学习模型在训练过程中，从输入端到输出端会得到一个预测结果和一个与真实结果相比的误差，这个误差会在模型中的每一层传递（反向传播），每一层的表示都会根据这个误差来做调整，直到模型收敛或达到预期的效果才结束，这是端到端的。</p><p>两者相比，端到端的学习省去了在每一个独立学习任务执行之前所做的数据标注，为样本做标注的代价是昂贵的、易出错的，也是深度学习的显著特点之一。端到端可让深度学习的过程简化为：喂给模型数据，模型训练至收敛，模型输出我们想要的结果（<strong>这个过程中深度学习模型就像黑箱</strong>）。</p><h3 id="概念2：RNN，CNN，Transformer"><a href="#概念2：RNN，CNN，Transformer" class="headerlink" title="概念2：RNN，CNN，Transformer"></a>概念2：RNN，CNN，Transformer</h3><p>深度学习是一种基于特征学习的机器学习方法，把原始数据转变成更抽象的特征表示，采用了更加复杂的神经网络，达到对数据更深的理解。</p><p>由此引出深度学习的三大特征提取器：RNN循环神经网络，CNN卷积神经网络，Transformer。</p><p>这三者的具体原理细节可见： <a href="https://www.cnblogs.com/sandwichnlp/p/11612596.html">三大特征提取器（RNN&#x2F;CNN&#x2F;Transformer） - 西多士NLP - 博客园 (cnblogs.com)</a> </p><p>RNN局限性在于并行性和全局性差，CNN在nlp领域并不十分适合，目前要数Transformer风头正盛。</p><p>此处粘贴上文中对于Transformer的小结：在语义特征提取能力，并行计算能力，长距离特征捕获能力及任务综合特征抽取能力都显著强于RNN和CNN。</p><h3 id="概念3：Encoder-Decoder框架"><a href="#概念3：Encoder-Decoder框架" class="headerlink" title="概念3：Encoder-Decoder框架"></a>概念3：Encoder-Decoder框架</h3><p>如果是深度学习模型就像黑箱，那么Encoder-Decoder框架就是黑箱中的两个部分，一部分负责编码，一部分负责解码。</p><p>在不同的NLP任务中，两个框架都是由多个单独的特征提取器组成（如CNN或LSTM）。</p><p>将向量通过Encoder框架，得到一个矩阵或向量作为输入序列的编码。在Decoder中，则根据任务目的，对得到的特征进行解码，得到我们想要的输出结果。</p><p>所以针对一个任务，在框架中堆叠的特征提取器至关重要。而所谓的Transformer结构，就是由多个Transformer块堆叠而成的Encoder-Decoder框架。</p><h3 id="概念4：Seq2Seq模型"><a href="#概念4：Seq2Seq模型" class="headerlink" title="概念4：Seq2Seq模型"></a>概念4：Seq2Seq模型</h3><p>提出这个概念是为了针对输出结果长度不确定的任务。</p><p>Seq2Seq其实就是Encoder-Decoder结构的网络，它的输入和输出都是一个序列。</p><p>在Encoder中，序列被转换成一个固定长度的向量，然后通过Decoder将该向量转换成我们想要的序列输出来。 </p><h3 id="概念5：非自回归模型和自回归模型"><a href="#概念5：非自回归模型和自回归模型" class="headerlink" title="概念5：非自回归模型和自回归模型"></a>概念5：非自回归模型和自回归模型</h3><p>目前主流的神经机器翻译模型为自回归模型（AR），每一步的译文单词的生成都依赖于之前的翻译结果，但是模型只能逐词生成译文，翻译速度较慢。</p><p>非自回归(NAR)模型并行生成序列的所有标记，与自回归模型相比，生成速度更快，但代价是准确性较低。 </p><p>总结：</p><p>非自回归的提出是为了降低自回归模型的时延，只是非自回归和半非自回归的依赖关系学习和生成难度更大，生成质量也更弱，但是在一些输入输出较为对其的任务（如翻译）上可以提供不错的生成效果。</p><p>此处存一个链接，日后可能会用到： <a href="https://mp.weixin.qq.com/s/pe2E69Gpw0nT9sSHvtBGSg">自回归与非自回归模型不可兼得？预训练模型BANG全都要！ (qq.com)</a> </p><h3 id="概念6：序列标注问题"><a href="#概念6：序列标注问题" class="headerlink" title="概念6：序列标注问题"></a>概念6：序列标注问题</h3><p>将输入的语言序列转化为标注序列，通过标注序列来解决问题。常用于解决命名实体识别，词性序列标注等问题。</p><h1 id="一些综述"><a href="#一些综述" class="headerlink" title="一些综述"></a>一些综述</h1><p> <a href="https://www.cnblogs.com/sandwichnlp/p/11947627.html">预训练语言模型整理（ELMo&#x2F;GPT&#x2F;BERT…） - 西多士NLP - 博客园 (cnblogs.com)</a> </p><p>中文文本纠错调研（含工业界和学术界方案）：<a href="https://blog.nghuyong.top/2021/05/26/NLP/text-corrector/">https://blog.nghuyong.top/2021/05/26/NLP/text-corrector/</a></p><p> <a href="https://blog.csdn.net/BGoodHabit/article/details/114589007">(7条消息) 中文纠错（Chinese Spelling Correct）最新技术方案总结_BGoodHabit的博客-CSDN博客_中文纠错</a> </p><p> <a href="https://zhuanlan.zhihu.com/p/545510251">自然语言处理任务系列（二）——文本纠错 - 知乎 (zhihu.com)</a> </p><h2 id="关于工业解决方案Pycorrector：（mark起来，后续做实验也许会事半功倍）"><a href="#关于工业解决方案Pycorrector：（mark起来，后续做实验也许会事半功倍）" class="headerlink" title="关于工业解决方案Pycorrector：（mark起来，后续做实验也许会事半功倍）"></a>关于工业解决方案Pycorrector：（mark起来，后续做实验也许会事半功倍）</h2><p>项目地址：<a href="https://github.com/shibing624/pycorrector">https://github.com/shibing624/pycorrector</a></p><p>源码解读：<a href="https://zhuanlan.zhihu.com/p/138981644">https://zhuanlan.zhihu.com/p/138981644</a></p><ol><li><p>T5模型：在pycorrector中发现潜力很大，我认为有研究的价值。目前想法是尝试用该模型运行，再探究其模型原理。</p><p><a href="https://www.cnblogs.com/little-horse/p/16670717.html">https://www.cnblogs.com/little-horse/p/16670717.html</a></p></li></ol><h2 id="GEC：-Grammar-Error-Correct"><a href="#GEC：-Grammar-Error-Correct" class="headerlink" title="GEC： Grammar Error Correct"></a>GEC： Grammar Error Correct</h2><ol><li><p>目前主流方法为MT（机器翻译），旨在让机器从错误句子翻译为正确句子。使用MT思想，目前的SOTA出自T5。</p></li><li><p>另一种方法为序列标注，将文本生成任务转化为文本编辑任务。通过一些<code>edit operator</code>将输入句子重构。通过将序列标注模型与Bert等模型结合，来预测进行那种<code>edit operator</code>，。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记--字符串与常用数据结构</title>
      <link href="/2023/01/20/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/20/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>其实很久以前就开始接触python了，从做出自以为很厉害的词云图，爬虫，简单的模型训练，到down开源代码改出毕业设计；</p><p>从照着书敲，照着网页敲，到自己瞎堆代码造屎山。</p><p>在做完一个又一个不想回看的实验后，产生是时候构建一个完整的知识体系了这种觉悟。</p><p>故在此记录学习python的点点滴滴。</p><p>（来自github：Python-100-Days）</p><hr><h2 id="数字与字符串的格式化输出"><a href="#数字与字符串的格式化输出" class="headerlink" title="数字与字符串的格式化输出"></a>数字与字符串的格式化输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串的格式化输出</span></span><br><span class="line">str1 = <span class="string">&#x27;春野樱&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;旗木卡卡西&#x27;</span></span><br><span class="line">str3 = <span class="string">&#x27;宇智波佐助&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;的老师是&#123;1&#125;，他还有一个学生叫&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(str1, str2, str3))</span><br><span class="line"></span><br><span class="line">a, b = <span class="number">5</span>, <span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(a, b, a*b))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数字的格式化输出</span></span><br><span class="line">a, b = <span class="number">4</span>, <span class="number">7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a*b))</span><br></pre></td></tr></table></figure><h2 id="常用的数据结构"><a href="#常用的数据结构" class="headerlink" title="常用的数据结构"></a>常用的数据结构</h2><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h3><p>列表是值的有序序列，每个值都通过索引进行标识。每个元素可以用<code>for</code>遍历，也可以利用切片访问和取出。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment"># print(list1)</span></span><br><span class="line"><span class="comment"># print(len(list1))</span></span><br><span class="line">list2 = [<span class="string">&#x27;hello&#x27;</span>] * <span class="number">3</span></span><br><span class="line"><span class="comment"># print(list2) # [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"><span class="comment"># print(list1[-3:]) # [8, 9, 100]</span></span><br><span class="line">list1[<span class="number">3</span>] = <span class="number">78</span></span><br><span class="line"><span class="comment"># print(list1) # [1, 3, 5, 78, 9, 100]</span></span><br><span class="line"><span class="comment"># 用循环访问列表中元素</span></span><br><span class="line"><span class="comment"># for index in range(len(list1)):</span></span><br><span class="line"><span class="comment">#     print(list1[index])</span></span><br><span class="line"><span class="comment"># for elem in list1:</span></span><br><span class="line"><span class="comment">#     print(elem)</span></span><br><span class="line"><span class="comment"># 通过enumerate函数访问列表，可以同时获得索引与值</span></span><br><span class="line"><span class="keyword">for</span> index, elem <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(index, elem)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">89</span>, <span class="number">245</span>]</span><br><span class="line">list1.append(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># print(list1) # [1, 3, 4, 7, 89, 245, 5]</span></span><br><span class="line">list1.insert(<span class="number">2</span>, <span class="number">40</span>) <span class="comment"># 在索引为2的位置上添加元素40</span></span><br><span class="line"><span class="comment"># print(list1) # [1, 3, 40, 4, 7, 89, 245, 5]</span></span><br><span class="line"><span class="comment"># 删除元素时，先判断其是否在列表中</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span> <span class="keyword">in</span> list1:</span><br><span class="line">    list1.remove(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># append 在末尾添加元素</span></span><br><span class="line"><span class="comment"># insert 在指定位置添加元素</span></span><br><span class="line"><span class="comment"># pop 在指定位置删除元素,括号中为空则删除末尾元素</span></span><br><span class="line"><span class="comment"># list1.pop()</span></span><br><span class="line">list1.pop(<span class="built_in">len</span>(list1) - <span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(list1)</span></span><br><span class="line">list1.clear()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对列表中元素进行排序</span></span><br><span class="line">list1 = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;zoo&#x27;</span>, <span class="string">&#x27;internationalization&#x27;</span>, <span class="string">&#x27;blueberry&#x27;</span>]</span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1)</span><br><span class="line"><span class="comment"># print(list2) # 按字母表排序</span></span><br><span class="line">list3 = <span class="built_in">sorted</span>(list1, reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(list3) # reverse指倒序</span></span><br><span class="line">list4 = <span class="built_in">sorted</span>(list1, key = <span class="built_in">len</span>) <span class="comment"># 指定排序关键字为长度</span></span><br><span class="line">list1.sort(reverse = <span class="literal">True</span>) <span class="comment"># 也可直接让对象排序,只不过不是sorted,而是sort</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 采用生成表达式来生成列表</span></span><br><span class="line">f = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">f = [a + b <span class="keyword">for</span> a <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span> <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">&#x27;145&#x27;</span>] <span class="comment"># [&#x27;a1&#x27;, &#x27;a4&#x27;, &#x27;a5&#x27;, &#x27;b1&#x27;, &#x27;b4&#x27;, &#x27;b5&#x27;, &#x27;c1&#x27;, &#x27;c4&#x27;, &#x27;c5&#x27;]</span></span><br><span class="line"><span class="comment"># 此处创建的不是列表，而是生成器对象。</span></span><br><span class="line"><span class="comment"># 通过生成器可以获取到数据，但是不占用额外空间。</span></span><br><span class="line">f = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line"><span class="comment"># print(sys.getsizeof(f)) # 112</span></span><br><span class="line"><span class="built_in">print</span>(f) <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x000001FEC1F04820&gt;</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(val)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过关键词yiled将函数改造成生成器函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> fib(<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment"># a, b = b, a+b 这句话的含义是：先计算&#x27;=&#x27;右边的值，再将右边的值赋给左边</span></span><br></pre></td></tr></table></figure><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组 tuple"></a>元组 tuple</h3><p>元组也是一种容器数据类型，可以用一个变量来存储多个数据。</p><p><strong>与列表不同的是，元组中的元素不可以再更改</strong>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明元组</span></span><br><span class="line">t = (<span class="string">&#x27;Shika&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;中国北京&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(t)</span></span><br><span class="line"><span class="comment"># 报错，因为元组中元素不可更改</span></span><br><span class="line"><span class="comment"># tuple[2] = &#x27;中国海南&#x27;</span></span><br><span class="line"><span class="comment"># 元组与列表之间可以相互转换</span></span><br><span class="line">person_list = [<span class="string">&#x27;宇智波佐助&#x27;</span>, <span class="number">7</span>, <span class="literal">False</span>]</span><br><span class="line">person_tuple = <span class="built_in">tuple</span>(person_list)</span><br><span class="line"><span class="comment"># print(person_tuple) # (&#x27;宇智波佐助&#x27;, 7, False)</span></span><br><span class="line"><span class="comment"># print(list(person_tuple)) # [&#x27;宇智波佐助&#x27;, 7, False]</span></span><br><span class="line"><span class="comment"># 且列表中的元素可以更改</span></span><br><span class="line">person_list[<span class="number">2</span>] = <span class="string">&#x27;春野樱&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(person_list) <span class="comment"># [&#x27;宇智波佐助&#x27;, 7, &#x27;春野樱&#x27;]</span></span><br></pre></td></tr></table></figure><p>Q：为什么已经有列表，还需要元组？</p><p>A：元组中不能够修改的对象状态使项目更容易维护，并且其创建时间和空间占用都优于列表。</p><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h3><p>与数学中的集合一致，<strong>其中不允许有重复元素</strong>，可以进行交、并、差、补的运算。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建并使用集合</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># print(set1) # &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># print(&#x27;Length of set1 is&#x27;,len(set1)) # Length of set1 is 3</span></span><br><span class="line">set2 = <span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">set3 = <span class="built_in">set</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>))</span><br><span class="line"><span class="comment"># print(set2, set3) # &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125; &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># 采用print时，中间加一个逗号分隔，可以输出多个对象，中间自动空格填充。</span></span><br><span class="line">set4 = &#123;num <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> num % <span class="number">5</span> == <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集合中元素的增删</span></span><br><span class="line">set1.add(<span class="number">4</span>)</span><br><span class="line">set1.add(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 向set2末尾添加两个元素，这种方法可以为集合添加多个元素</span></span><br><span class="line">set2.update([<span class="number">11</span>, <span class="number">12</span>])</span><br><span class="line"><span class="comment"># 集合删除元素：discard或remove,pop</span></span><br><span class="line"><span class="comment"># 三者存在不同，remove移除一个不存在的元素会报错</span></span><br><span class="line">set2.discard(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">4</span> <span class="keyword">in</span> set2:</span><br><span class="line">    set2.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(set2)</span><br><span class="line"><span class="comment"># 集合中的pop方法，是从左边删除元素的</span></span><br><span class="line"><span class="built_in">print</span>(set3.pop())</span><br></pre></td></tr></table></figure><h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h3><p>与列表、集合共同点：可以存储任意类型对象</p><p>与列表、集合不同点：以键值对方式存储，键和值通过冒号分开</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;春野樱&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;宇智波佐助&#x27;</span>: <span class="number">91</span>, <span class="string">&#x27;漩涡鸣人&#x27;</span>: <span class="number">61</span>&#125;</span><br><span class="line"><span class="comment"># print(scores)</span></span><br><span class="line"><span class="comment"># 创造字典的构造器语法</span></span><br><span class="line">items1 = <span class="built_in">dict</span>(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># print(items1) # &#123;&#x27;one&#x27;: 1, &#x27;two&#x27;: 2, &#x27;three&#x27;: 3, &#x27;four&#x27;: 4&#125;</span></span><br><span class="line"><span class="comment"># 通过zip函数将两个列表压成一个字典</span></span><br><span class="line">items2 = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="string">&#x27;123&#x27;</span>))</span><br><span class="line"><span class="comment"># print(items2) # &#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;, &#x27;c&#x27;: &#x27;3&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 创造字典的推导式语法</span></span><br><span class="line">items3 = &#123;num: num ** <span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line"><span class="comment"># print(scores[&#x27;漩涡鸣人&#x27;])</span></span><br><span class="line"><span class="comment"># 遍历字典中所有键值对</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> scores:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span>:<span class="subst">&#123;scores[key]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># print(f&#x27;&#123;a&#125; * &#123;b&#125; = &#123;a*b&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># 相当于 print(&#x27;&#123;&#125; * &#123;&#125; = &#123;&#125;&#x27;.format(a, b, a*b)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新字典中的元素</span></span><br><span class="line">scores[<span class="string">&#x27;奈良鹿丸&#x27;</span>] = <span class="number">95</span></span><br><span class="line">scores[<span class="string">&#x27;山中井野&#x27;</span>] = <span class="number">80</span></span><br><span class="line"><span class="comment"># 字典中的批量构造，更新，字符串是不需要加引号的。</span></span><br><span class="line">scores.update(日向雏田=<span class="number">80</span>, 日向宁次 = <span class="number">82</span>)</span><br><span class="line"><span class="comment"># if &#x27;宇智波佐助&#x27; in scores:</span></span><br><span class="line"><span class="comment">#     print(scores[&#x27;宇智波佐助&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(scores.get(&#x27;李&#x27;)) # None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除字典中的元素</span></span><br><span class="line"><span class="comment"># print(scores.popitem()) # (&#x27;日向宁次&#x27;, 82)</span></span><br><span class="line"><span class="comment"># print(scores.pop(&#x27;日向雏田&#x27;)) # 80</span></span><br><span class="line">scores.clear()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/01/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>忙活了好久，找到了小时候布置QQ空间和邮箱博客的感觉。</p><p>决定建立个人技术博客的起因在于：最近学python特别迫切想找个记录的地方，CSDN还被同门关注了，于是想到了从github搭建。</p><p>现在是研一的寒假，疫情从某方面来讲终于结束了，也再无法作为摆烂的理由。</p><p>希望自己永远自省，永远向前。</p><p>希望自己不忘初心，努力生活。</p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
