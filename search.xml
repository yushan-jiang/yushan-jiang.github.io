<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++学习笔记</title>
      <link href="/2023/01/24/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/24/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>（来源：Primer C++第五版, 以及Cherno的视频）</p><p>此篇用于整理一些C++的基础碎片知识，随着刷题不断更新（用贪心算法女娲补天）。</p><p>好好学习，不然找不到工作 orz 。</p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>引用即别名</p></blockquote><p>通过将声明符写作<code>&amp;d</code>的形式来定义引用类型。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> &amp;refVal = ival; <span class="comment">// refVal指向ival（是ival的另一个名字）</span></span><br></pre></td></tr></table></figure><p>注：</p><p><strong>引用必须被初始化</strong>：引用一经初始化，将与对象一直绑定在一起，无法更改。</p><p><strong>引用并非对象</strong>：它只是别名。对其所有操作都是在与其绑定的对象上进行的。</p><p><strong>不能定义引用的引用</strong>：因为引用的初始值必须是一个对象，而引用不是对象。</p><p><strong>引用从一而终</strong>：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>&amp; ref = a;<span class="comment">//ref为a的引用</span></span><br><span class="line">ref = b;<span class="comment">//并不是指ref又引用了b，而是使ref引用的a值，等于b的值；</span></span><br><span class="line"><span class="comment">//a=8,b=8</span></span><br></pre></td></tr></table></figure><p>更改指针指向的对象：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* ref = &amp;a;</span><br><span class="line">*ref=<span class="number">2</span>;<span class="comment">//a=2</span></span><br><span class="line">ref = &amp;b;<span class="comment">//ref重新指向b</span></span><br><span class="line">*ref = <span class="number">3</span>;<span class="comment">//b=3</span></span><br></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><blockquote><p>与引用同为复合类型，都实现了对其他对象的间接访问。</p></blockquote><p>与引用不同之处在于：无需在定义时赋值，指针本身是对象。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> dval;</span><br><span class="line"><span class="type">double</span> *pd = &amp;dval; <span class="comment">// pd初始值为double型对象dval的地址</span></span><br><span class="line"><span class="type">double</span> *pd2 = pd; <span class="comment">// pd2初始值为指向double型对象的指针</span></span><br></pre></td></tr></table></figure><p><code>&amp;dval</code>表示取对象的地址而非引用，因为引用不是对象，没有地址。</p><p>若指针已指向一个对象，可使用解引用符号<code>*</code>来访问它或对其赋值。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;ival;</span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">// *p得到p所指对象，输出42</span></span><br><span class="line">*p = <span class="number">0</span>; <span class="comment">// 对p所指对象复制，ival=0</span></span><br><span class="line">*q = <span class="literal">nullptr</span>; <span class="comment">// 定义空指针，可初始化为nullptr或0</span></span><br></pre></td></tr></table></figure><p><code>void*</code>是一种特殊的指针类型，可以存放任意类型对象的地址。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> obj = <span class="number">3.14</span>, *pd = &amp;obj;</span><br><span class="line"><span class="type">void</span> *pv = &amp;obj;</span><br><span class="line">pv = pd;</span><br></pre></td></tr></table></figure><p><strong>指向指针的引用：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">int</span> *&amp;r = p; <span class="comment">//r是对指针p的引用</span></span><br><span class="line"></span><br><span class="line">r = &amp;i; <span class="comment">//r为p的别名，其实就是让p指向i</span></span><br><span class="line">*r = <span class="number">0</span>; <span class="comment">//解引用r得到i，将i值改为0</span></span><br></pre></td></tr></table></figure><p>如何辨别<code>r</code>的定义，找到与<code>r</code>最近的符号，<code>&amp;</code>就是引用，<code>*</code>就是指针。</p><h2 id="※数组"><a href="#※数组" class="headerlink" title="※数组"></a>※数组</h2><blockquote><p>数组大小固定，vector大小可更改。</p></blockquote><p><strong>定义和初始化：</strong>形如<code>a[d]</code>，其中维度必须是常量表达式。并且定义数组时必须指定类型。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *parr[<span class="number">30</span>]; <span class="comment">// 含有30个整型指针的数组</span></span><br></pre></td></tr></table></figure><p><strong>显示初始化：</strong></p><p>通过列表初始化时可以忽略维度。</p><p>若初始值总数量 &gt; 维度，则报错。若总数量 &lt; 维度，剩下的值初始化成默认值。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> sz = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> ial[sz] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">//维度为3</span></span><br><span class="line"><span class="type">int</span> a2[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">//维度为3</span></span><br><span class="line"><span class="type">int</span> a3[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">//后两位默认为0</span></span><br><span class="line"><span class="type">int</span> a5[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">//报错。这是不允许的</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a1[] = &#123;<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> a2[] = &#123;<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> a3[] = <span class="string">&quot;C++&quot;</span>; <span class="comment">//字符数组可以用字符串字面值初始化</span></span><br><span class="line">string a4[] = &#123;<span class="string">&quot;look&quot;</span>, <span class="string">&quot;at&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>注：数组不允许拷贝和赋值</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> a2[] = a;<span class="comment">//错误，不允许使用一个数组初始化另一个数组</span></span><br><span class="line">a2 = a;<span class="comment">//错误，不能把一个数组直接赋给另一个数组</span></span><br></pre></td></tr></table></figure><p><strong>理解复杂的数组声明：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *ptrs[<span class="number">10</span>]; <span class="comment">//大小为10，存放整型指针</span></span><br><span class="line"><span class="comment">//从右向左看：ptrs是大小为10的数组；存放类型为int*</span></span><br><span class="line"><span class="type">int</span> &amp;refs[<span class="number">10</span>];<span class="comment">//错误，不存在引用的数组！</span></span><br><span class="line"><span class="built_in">int</span> (*parray)[<span class="number">10</span>] = &amp;arr; <span class="comment">//parray指向一个包含10个整型的数组</span></span><br><span class="line"><span class="comment">//先拆括号，parray是指针；</span></span><br><span class="line"><span class="comment">//从右向左看：指针指向大小为10的数组，存放int型</span></span><br><span class="line"><span class="built_in">int</span> (&amp;arrRef)[<span class="number">10</span>] = arr; <span class="comment">//arrRef是个引用！</span></span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><table><thead><tr><th align="center">~</th><th align="center">位取反</th></tr></thead><tbody><tr><td align="center">&lt;&lt;</td><td align="center">左移</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移</td></tr><tr><td align="center">&amp;</td><td align="center">位与</td></tr><tr><td align="center">^</td><td align="center">位异或</td></tr><tr><td align="center">|</td><td align="center">位或</td></tr></tbody></table><h2 id="※函数指针"><a href="#※函数指针" class="headerlink" title="※函数指针"></a>※函数指针</h2><blockquote><p>函数指针指向的是函数而非对象。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">lengthCompare</span><span class="params">(<span class="type">const</span> string &amp;, <span class="type">const</span> string &amp;)</span></span>;</span><br><span class="line"><span class="comment">// 函数的类型取决于返回值和形参的类型。</span></span><br><span class="line"><span class="comment">// 该函数的类型为 bool(const string &amp;, bool const string &amp;)</span></span><br><span class="line"><span class="comment">// 要想声明一个指向该函数的指针，只需要用指针替换函数名</span></span><br><span class="line"><span class="built_in">bool</span> (*pf) (<span class="type">const</span> string &amp;, <span class="type">const</span> string &amp;);</span><br></pre></td></tr></table></figure><p>辨别函数指针：</p><p><code>pf</code>左侧有<code>*</code>，说明<code>pf</code>为指针；</p><p>右侧有形参列表，说明该指针是函数指针；</p><p>左侧看到指向的函数返回类型为布尔值。</p><p><strong>注：<code>*pf</code>两端的括号必不可少，否则pf是一个返回值为布尔指针的函数。</strong></p><p>使用函数指针：</p><blockquote><p>当把函数名作为值使用时，该函数自动转换成指针。</p><p>可以直接使用函数指针调用函数而无需解引用。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pf = lengthCompare;</span><br><span class="line">pf = &amp;lengthCompare;<span class="comment">// 二者等价，取址符可有可无。</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> b1 = <span class="built_in">pf</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line"><span class="type">bool</span> b2 = <span class="built_in">lengthCompare</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line"><span class="type">bool</span> b3 = (*pf)(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;goodbye&quot;</span>); <span class="comment">// 三者等价</span></span><br></pre></td></tr></table></figure><p>重载函数的指针：</p><p>使用重载函数时，必须清楚的界定使用的是哪个函数。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ff</span><span class="params">(<span class="type">int</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ff</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="built_in">void</span> (*pf) (insigned <span class="type">int</span>) = ff;</span><br></pre></td></tr></table></figure><h2 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h2><blockquote><p>利用<code>new</code>和<code>delete</code>管理动态内存</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用new分配内存，会返回指向该对象的指针。</span></span><br><span class="line"><span class="type">int</span> *p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1024</span>);<span class="comment">//值初始化为1024，若括号中没有值则初始化为0</span></span><br><span class="line"><span class="comment">//动态分配的对象默认初始化，类类型对象将调用构造函数初始化</span></span><br><span class="line"><span class="comment">//p为栈上的指针，指向堆上对应的内存块。</span></span><br></pre></td></tr></table></figure><h2 id="内联函数和constexpr函数"><a href="#内联函数和constexpr函数" class="headerlink" title="内联函数和constexpr函数"></a>内联函数和constexpr函数</h2><blockquote><p>内联函数可避免函数调用的开销</p></blockquote><p>声明内联函数：在返回类型前加<code>inline</code>关键字，如：</p><p><code>inline const string&amp; shorterString(const string&amp;, const string&amp;);</code></p><p>内联说明只是向编译器发出的请求，编译器可以选择忽略。</p><p>内联函数用于优化体量小，流程直接，频繁调用的函数。</p><p><strong>内联函数与宏：</strong></p><ol><li>宏定义不是函数，在预编译时将宏名替换成宏体（函数体）。内联函数是在编译时进行代码插入。</li><li>宏定义不做类型检查，内联函数会进行类型检查。</li><li>二者都是使用的时候进行代码展开，一个在预编译，一个在编译阶段。</li></ol><p>constexpr函数是指能由于常量表达式的函数，这种函数的返回类型和形参必须都是字面值类型。</p><h2 id="STL容器：priority-queue优先队列"><a href="#STL容器：priority-queue优先队列" class="headerlink" title="STL容器：priority_queue优先队列"></a>STL容器：priority_queue优先队列</h2><blockquote><p>队列遵循FIFO原则，而优先队列根据优先级弹出元素。</p></blockquote><p> <a href="https://www.nhooo.com/cpp/priority-queue-in-cpp.html">c++ 优先队列(priority_queue) - 基础教程在线 (nhooo.com)</a> </p><p>定义： <code>priority_queue&lt;Type, Container, Functional&gt;</code> </p><p><code>Type</code>是数据类型，<code>Container</code>是容器类型，<code>Functional</code>是比较方式。</p><p><code>stsort(a,b)</code>，返回0表示排列正确，如stsort(4,3)返回1，所以3应该排在4前面</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stsort</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a,<span class="type">const</span> <span class="type">int</span> b)</span><span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123; <span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">3</span> &#125;;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,less&lt;&gt; &gt;pq0;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : a) &#123;</span><br><span class="line">        pq0.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; pq0.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line">        pq0.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//greater最小值优先</span></span><br><span class="line">  <span class="comment">//less最大值优先</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条文知识（更碎片的知识）"><a href="#条文知识（更碎片的知识）" class="headerlink" title="条文知识（更碎片的知识）"></a>条文知识（更碎片的知识）</h2><ol><li><p><code>int a[5]</code>和<code>int*a = new int[5]</code>的区别：</p><p>都是分配内存，后者要判断内存是否分配成功，可用<code>delete[] a</code>释放。 </p><p>前者的内存放在栈上，可分配空间少；后者内存放于堆上，可以为非连续内存。所以分配较大内存需要用后者。</p><p>前者内存大小必须是常量，后者可以动态分配内存，不一定是常量。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* buffer = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">8</span>]; <span class="comment">//分配8个char单位，相当于创建大小为8的char数组</span></span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="number">8</span>); <span class="comment">//从buffer所指地址开始，连续8个位置设置为0</span></span><br><span class="line"><span class="keyword">delete</span>[] buffer; <span class="comment">//删除内存。</span></span><br></pre></td></tr></table></figure></li><li><p><code>C++</code>中<code>new</code>的用法：</p><p>在堆中开辟指定数据类型的空间；</p><p>调用构造函数，创建对象，并返回指向对象的指针。</p></li></ol><p>​     3.内联函数在编译时是否做参数类型检查？ 是。宏不会。</p><ol start="4"><li><p>引用与指针在函数中的作用：（以下两个代码作用相同）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数中创建指向a的指针，直接修改内存中的数值。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Increment</span><span class="params">(<span class="type">int</span>* value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//相当于一句</span></span><br><span class="line">    <span class="comment">//int* value = &amp;a;</span></span><br><span class="line">    *value++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">Increment</span>(&amp;a);<span class="comment">//a=6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数中创建了a的引用（别名），可通过修改这个引用来直接修改a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Increment</span><span class="params">(<span class="type">int</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    value++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">Increment</span>(a);<span class="comment">//a=6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类与结构体的区别：</p><p>区别仅仅在于可见性，类的可见性默认为private，结构体可见性默认为public。</p><p>但是工程上，如果简单对数据或变量进行操作用结构体，若是操纵庞大的体系，需要继承等等则用类。</p></li><li><p>static：</p><p>经过static声明的变量会存储在全局静态区，且这个变量只能在声明它的这个模块引用。</p><p>主要有面向过程和面向对象两种用法，前者针对函数和变量，后者主要在类和结构体中使用。</p><p>面向过程：静态全局变量，静态局部变量，静态函数。</p><p>面向对象：静态数据成员，静态成员函数。</p><table><thead><tr><th align="center">static用法</th><th align="center">要点</th></tr></thead><tbody><tr><td align="center">静态全局变量</td><td align="center">在声明它的整个文件可见，不能被其他文件使用</td></tr><tr><td align="center">静态局部变量</td><td align="center">只初始化一次，可以保存局部变量的值，并且使该变量只属于局部模块本身（相比全局变量）。</td></tr><tr><td align="center">静态函数</td><td align="center">在声明它的整个文件可见，不能被其他文件使用</td></tr><tr><td align="center">静态数据成员</td><td align="center">变量由所有实例共享，一变则全变，如利率</td></tr><tr><td align="center">静态成员函数</td><td align="center">只能操作静态成员</td></tr></tbody></table></li><li><p>枚举</p><p>枚举数据类型是一种由程序员自己定义的数据类型，合法值为与他们关联的一组命名整数常量。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Roster</span></span><br><span class="line">&#123;</span><br><span class="line">    Sharon, Tom, John</span><br><span class="line">&#125;;</span><br><span class="line">Roster student = Sharon;</span><br></pre></td></tr></table></figure><ol start="8"><li><p>构造函数&amp;析构函数</p><p>类中的一种特殊的成员函数，在实例化对象时自动调用(或用new分配一个对象时)。</p><p>要么用户自己定义，要么编译器自动生成。</p><p>析构函数也是特殊的成员函数，会在每次删除创建的对象时执行。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">float</span> X, Y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line">X = <span class="number">0.0f</span>;</span><br><span class="line">Y = <span class="number">0.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;entity destroyed!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 菜鸟养成 </category>
          
          <category> 求职准备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记</title>
      <link href="/2023/01/21/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/21/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>是这样的，上学期被同学问会不会Linux，于是反问自己这个问题，实在是不好意思说自己会。</p><p>本科上的课大概只是想快点把作业写完，去玩，去学别的，于是对Linux系统的命令还很茫然。</p><p>趁此机会，恶补一下知识好了。</p><p>（来源：蓝桥云课–Linux基础）</p><hr><h1 id="记在前面"><a href="#记在前面" class="headerlink" title="记在前面"></a>记在前面</h1><p>有几个技巧需要记住：</p><ol><li><p>活用重要快捷键：</p><p><code>tab</code>键：使用<code>tab</code>键可以进行命令、目录和参数的补全</p><p><code>ctrl+c</code>：强行终止当前程序，回到可控状态</p><p><code>ctrl+d</code>：退出用户或退出终端</p></li><li><p>通配符：</p><p>通配符<code>*</code>用来匹配0或多个字符，<code>？</code>用来匹配任意一个字符。</p><p>如下，可从一大堆文件中匹配出txt文件。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/shiyanlou</span><br><span class="line">touch fgh.txt agf.txt</span><br><span class="line">ls *.txt</span><br></pre></td></tr></table></figure><p>另外，在创建文件时若想一次性创建多个文件，可直接如下操作：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch love_&#123;1..10&#125;_shiyanlou.txt</span><br></pre></td></tr></table></figure></li><li><p>使用<code>man</code>命令，可以获得谋克命令的说明和使用方法。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man 1 ls</span><br></pre></td></tr></table></figure><p>1代表了一般命令区段，这样可以少显示一些。</p><p>若知道命令的作用，只需要获得某个参数的具体作用，就使用<code>--help</code>。</p></li></ol><h1 id="一些命令总结："><a href="#一些命令总结：" class="headerlink" title="一些命令总结："></a>一些命令总结：</h1><h2 id="Linux命令：对文件的基本操作"><a href="#Linux命令：对文件的基本操作" class="headerlink" title="Linux命令：对文件的基本操作"></a>Linux命令：对文件的基本操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对文件的基本操作</span></span><br><span class="line">cd ~ # 回到home目录</span><br><span class="line">touch test # touch命令用于创建空白文件</span><br><span class="line">mkdir mydir # mkdir创建空目录</span><br><span class="line">mkdir -p father/son/grandson # -p 创建多级目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp test /father/son/grandson # 使用cp命令复制一个文件到指定目录</span><br><span class="line">cp -r father family # 使用cp -r复制目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm test # rm命令删除文件</span><br><span class="line">touch test</span><br><span class="line">chmod 444 test # 给test赋予只读权限</span><br><span class="line">rm -f test # 删除只读文件时，需要-f命令强制删除</span><br><span class="line">rm -r family # 删除目录时，需要-r强制删除</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移动文件命令 <span class="built_in">mv</span> 源目录 目的目录</span></span><br><span class="line">cd ~</span><br><span class="line">mkdir Documents</span><br><span class="line">touch file1</span><br><span class="line">mv file1 Documents</span><br><span class="line">cd Documents</span><br><span class="line">mv file1 myfile # mv命令还可以对文件重命名</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件</span></span><br><span class="line">cp /etc/passwd passwd</span><br><span class="line">cat passwd # cat正序显示文件</span><br><span class="line">cat -n passwd # 显示行号</span><br><span class="line">cat /etc/group | sort</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> 用于读取指定文件内容并打印到终端输出，| <span class="built_in">sort</span>表示将读取的文本进行字典排序再输出。</span></span><br><span class="line">cat /etc/group | grep -E &quot;shiyanlou&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用grep -E 指定字符串过滤出结果</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阅读文件</span></span><br><span class="line">more passwd # 回车显示一行，空格显示一屏幕</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 菜鸟养成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记--面向对象编程</title>
      <link href="/2023/01/21/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/21/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义类，创建并使用对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># __init__方法用于创建对象时进行初始化</span></span><br><span class="line">    <span class="comment"># 通过这个方法为学生对象绑定name和age两个属性</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, course_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s正在学习%s.&#x27;</span> % (self.name, course_name))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">watch_movie</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(self.age) &lt; <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在观看爱情电影.&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    stu1 = Student(<span class="string">&#x27;漩涡鸣人&#x27;</span>,<span class="number">13</span>)</span><br><span class="line">    stu1.study(<span class="string">&#x27;影分身之术&#x27;</span>)</span><br><span class="line">    stu1.watch_movie()</span><br><span class="line">    stu2 = Student(<span class="string">&#x27;旗木卡卡西&#x27;</span>, <span class="string">&#x27;27&#x27;</span>)</span><br><span class="line">    stu2.study(<span class="string">&#x27;神威&#x27;</span>)</span><br><span class="line">    stu2.watch_movie()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试访问可见性</span></span><br><span class="line"><span class="comment"># 如果希望属性和方法是私有的，命名时用两个下划线作为开头</span></span><br><span class="line"><span class="comment"># 但是，利用更换名字的规则仍然可以对私密属性方法进行访问</span></span><br><span class="line"><span class="comment"># 实际开发中，不建议设置私有属性，会导致子类无法访问</span></span><br><span class="line"><span class="comment"># 通常用单下划线开头，表示属性是受保护的（仅仅是表示，暗示）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, foo</span>):</span><br><span class="line">        self.foo = __foo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__foo)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test = Test(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    test.__bar() <span class="comment">#报错</span></span><br><span class="line">    <span class="built_in">print</span>(test.__foo) <span class="comment"># 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 菜鸟养成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本纠错整理</title>
      <link href="/2023/01/20/%E6%96%87%E6%9C%AC%E7%BA%A0%E9%94%99%E6%95%B4%E7%90%86/"/>
      <url>/2023/01/20/%E6%96%87%E6%9C%AC%E7%BA%A0%E9%94%99%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>整理一下过于杂乱的知识保存在此，</p><p>走一步看一步吧。</p><h1 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h1><h2 id="NLP技术发展及相关概念"><a href="#NLP技术发展及相关概念" class="headerlink" title="NLP技术发展及相关概念"></a>NLP技术发展及相关概念</h2><p>基于规则和传统的机器学习方法不再赘述，本节从深度学习开始讲起。</p><p>不过要先提一嘴传统机器学习与深度学习的差别之一：端到端。</p><h3 id="概念1：端到端"><a href="#概念1：端到端" class="headerlink" title="概念1：端到端"></a>概念1：端到端</h3><p>传统机器学习流程由多个步骤组成， 每个步骤是一个独立的任务，其结果的好坏会影响到下一步骤，从而影响整个训练的结果，这是非端到端的。</p><p>深度学习模型在训练过程中，从输入端到输出端会得到一个预测结果和一个与真实结果相比的误差，这个误差会在模型中的每一层传递（反向传播），每一层的表示都会根据这个误差来做调整，直到模型收敛或达到预期的效果才结束，这是端到端的。</p><p>两者相比，端到端的学习省去了在每一个独立学习任务执行之前所做的数据标注，为样本做标注的代价是昂贵的、易出错的，也是深度学习的显著特点之一。端到端可让深度学习的过程简化为：喂给模型数据，模型训练至收敛，模型输出我们想要的结果（<strong>这个过程中深度学习模型就像黑箱</strong>）。</p><h3 id="概念2：RNN，CNN，Transformer"><a href="#概念2：RNN，CNN，Transformer" class="headerlink" title="概念2：RNN，CNN，Transformer"></a>概念2：RNN，CNN，Transformer</h3><p>深度学习是一种基于特征学习的机器学习方法，把原始数据转变成更抽象的特征表示，采用了更加复杂的神经网络，达到对数据更深的理解。</p><p>由此引出深度学习的三大特征提取器：RNN循环神经网络，CNN卷积神经网络，Transformer。</p><p>这三者的具体原理细节可见： <a href="https://www.cnblogs.com/sandwichnlp/p/11612596.html">三大特征提取器（RNN&#x2F;CNN&#x2F;Transformer） - 西多士NLP - 博客园 (cnblogs.com)</a> </p><p>RNN局限性在于并行性和全局性差，CNN在nlp领域并不十分适合，目前要数Transformer风头正盛。</p><p>此处粘贴上文中对于Transformer的小结：在语义特征提取能力，并行计算能力，长距离特征捕获能力及任务综合特征抽取能力都显著强于RNN和CNN。</p><h3 id="概念3：Encoder-Decoder框架"><a href="#概念3：Encoder-Decoder框架" class="headerlink" title="概念3：Encoder-Decoder框架"></a>概念3：Encoder-Decoder框架</h3><p>如果是深度学习模型就像黑箱，那么Encoder-Decoder框架就是黑箱中的两个部分，一部分负责编码，一部分负责解码。</p><p>在不同的NLP任务中，两个框架都是由多个单独的特征提取器组成（如CNN或LSTM）。</p><p>将向量通过Encoder框架，得到一个矩阵或向量作为输入序列的编码。在Decoder中，则根据任务目的，对得到的特征进行解码，得到我们想要的输出结果。</p><p>所以针对一个任务，在框架中堆叠的特征提取器至关重要。而所谓的Transformer结构，就是由多个Transformer块堆叠而成的Encoder-Decoder框架。</p><h3 id="概念4：Seq2Seq模型"><a href="#概念4：Seq2Seq模型" class="headerlink" title="概念4：Seq2Seq模型"></a>概念4：Seq2Seq模型</h3><p>提出这个概念是为了针对输出结果长度不确定的任务。</p><p>Seq2Seq其实就是Encoder-Decoder结构的网络，它的输入和输出都是一个序列。</p><p>在Encoder中，序列被转换成一个固定长度的向量，然后通过Decoder将该向量转换成我们想要的序列输出来。 </p><h3 id="概念5：非自回归模型和自回归模型"><a href="#概念5：非自回归模型和自回归模型" class="headerlink" title="概念5：非自回归模型和自回归模型"></a>概念5：非自回归模型和自回归模型</h3><p>目前主流的神经机器翻译模型为自回归模型（AR），每一步的译文单词的生成都依赖于之前的翻译结果，但是模型只能逐词生成译文，翻译速度较慢。</p><p>非自回归(NAR)模型并行生成序列的所有标记，与自回归模型相比，生成速度更快，但代价是准确性较低。 </p><p>总结：</p><p>非自回归的提出是为了降低自回归模型的时延，只是非自回归和半非自回归的依赖关系学习和生成难度更大，生成质量也更弱，但是在一些输入输出较为对其的任务（如翻译）上可以提供不错的生成效果。</p><p>此处存一个链接，日后可能会用到： <a href="https://mp.weixin.qq.com/s/pe2E69Gpw0nT9sSHvtBGSg">自回归与非自回归模型不可兼得？预训练模型BANG全都要！ (qq.com)</a> </p><h1 id="一些综述"><a href="#一些综述" class="headerlink" title="一些综述"></a>一些综述</h1><p> <a href="https://www.cnblogs.com/sandwichnlp/p/11947627.html">预训练语言模型整理（ELMo&#x2F;GPT&#x2F;BERT…） - 西多士NLP - 博客园 (cnblogs.com)</a> </p><p>中文文本纠错调研（含工业界和学术界方案）：<a href="https://blog.nghuyong.top/2021/05/26/NLP/text-corrector/">https://blog.nghuyong.top/2021/05/26/NLP/text-corrector/</a></p><p> <a href="https://blog.csdn.net/BGoodHabit/article/details/114589007">(7条消息) 中文纠错（Chinese Spelling Correct）最新技术方案总结_BGoodHabit的博客-CSDN博客_中文纠错</a> </p><p> <a href="https://zhuanlan.zhihu.com/p/545510251">自然语言处理任务系列（二）——文本纠错 - 知乎 (zhihu.com)</a> </p><h2 id="关于工业解决方案Pycorrector：（mark起来，后续做实验也许会事半功倍）"><a href="#关于工业解决方案Pycorrector：（mark起来，后续做实验也许会事半功倍）" class="headerlink" title="关于工业解决方案Pycorrector：（mark起来，后续做实验也许会事半功倍）"></a>关于工业解决方案Pycorrector：（mark起来，后续做实验也许会事半功倍）</h2><p>项目地址：<a href="https://github.com/shibing624/pycorrector">https://github.com/shibing624/pycorrector</a></p><p>源码解读：<a href="https://zhuanlan.zhihu.com/p/138981644">https://zhuanlan.zhihu.com/p/138981644</a></p><ol><li><p>T5模型：在pycorrector中发现潜力很大，我认为有研究的价值。目前想法是尝试用该模型运行，再探究其模型原理。</p><p><a href="https://www.cnblogs.com/little-horse/p/16670717.html">https://www.cnblogs.com/little-horse/p/16670717.html</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 文本纠错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本纠错 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记--字符串与常用数据结构</title>
      <link href="/2023/01/20/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/20/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>其实很久以前就开始接触python了，从做出自以为很厉害的词云图，爬虫，简单的模型训练，到down开源代码改出毕业设计；</p><p>从照着书敲，照着网页敲，到自己瞎堆代码造屎山。</p><p>在做完一个又一个不想回看的实验后，产生是时候构建一个完整的知识体系了这种觉悟。</p><p>故在此记录学习python的点点滴滴。</p><p>（来自github：Python-100-Days）</p><hr><h2 id="数字与字符串的格式化输出"><a href="#数字与字符串的格式化输出" class="headerlink" title="数字与字符串的格式化输出"></a>数字与字符串的格式化输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串的格式化输出</span></span><br><span class="line">str1 = <span class="string">&#x27;春野樱&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;旗木卡卡西&#x27;</span></span><br><span class="line">str3 = <span class="string">&#x27;宇智波佐助&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;的老师是&#123;1&#125;，他还有一个学生叫&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(str1, str2, str3))</span><br><span class="line"></span><br><span class="line">a, b = <span class="number">5</span>, <span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(a, b, a*b))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数字的格式化输出</span></span><br><span class="line">a, b = <span class="number">4</span>, <span class="number">7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a*b))</span><br></pre></td></tr></table></figure><h2 id="常用的数据结构"><a href="#常用的数据结构" class="headerlink" title="常用的数据结构"></a>常用的数据结构</h2><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h3><p>列表是值的有序序列，每个值都通过索引进行标识。每个元素可以用<code>for</code>遍历，也可以利用切片访问和取出。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment"># print(list1)</span></span><br><span class="line"><span class="comment"># print(len(list1))</span></span><br><span class="line">list2 = [<span class="string">&#x27;hello&#x27;</span>] * <span class="number">3</span></span><br><span class="line"><span class="comment"># print(list2) # [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"><span class="comment"># print(list1[-3:]) # [8, 9, 100]</span></span><br><span class="line">list1[<span class="number">3</span>] = <span class="number">78</span></span><br><span class="line"><span class="comment"># print(list1) # [1, 3, 5, 78, 9, 100]</span></span><br><span class="line"><span class="comment"># 用循环访问列表中元素</span></span><br><span class="line"><span class="comment"># for index in range(len(list1)):</span></span><br><span class="line"><span class="comment">#     print(list1[index])</span></span><br><span class="line"><span class="comment"># for elem in list1:</span></span><br><span class="line"><span class="comment">#     print(elem)</span></span><br><span class="line"><span class="comment"># 通过enumerate函数访问列表，可以同时获得索引与值</span></span><br><span class="line"><span class="keyword">for</span> index, elem <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(index, elem)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">89</span>, <span class="number">245</span>]</span><br><span class="line">list1.append(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># print(list1) # [1, 3, 4, 7, 89, 245, 5]</span></span><br><span class="line">list1.insert(<span class="number">2</span>, <span class="number">40</span>) <span class="comment"># 在索引为2的位置上添加元素40</span></span><br><span class="line"><span class="comment"># print(list1) # [1, 3, 40, 4, 7, 89, 245, 5]</span></span><br><span class="line"><span class="comment"># 删除元素时，先判断其是否在列表中</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span> <span class="keyword">in</span> list1:</span><br><span class="line">    list1.remove(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># append 在末尾添加元素</span></span><br><span class="line"><span class="comment"># insert 在指定位置添加元素</span></span><br><span class="line"><span class="comment"># pop 在指定位置删除元素,括号中为空则删除末尾元素</span></span><br><span class="line"><span class="comment"># list1.pop()</span></span><br><span class="line">list1.pop(<span class="built_in">len</span>(list1) - <span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(list1)</span></span><br><span class="line">list1.clear()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对列表中元素进行排序</span></span><br><span class="line">list1 = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;zoo&#x27;</span>, <span class="string">&#x27;internationalization&#x27;</span>, <span class="string">&#x27;blueberry&#x27;</span>]</span><br><span class="line">list2 = <span class="built_in">sorted</span>(list1)</span><br><span class="line"><span class="comment"># print(list2) # 按字母表排序</span></span><br><span class="line">list3 = <span class="built_in">sorted</span>(list1, reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(list3) # reverse指倒序</span></span><br><span class="line">list4 = <span class="built_in">sorted</span>(list1, key = <span class="built_in">len</span>) <span class="comment"># 指定排序关键字为长度</span></span><br><span class="line">list1.sort(reverse = <span class="literal">True</span>) <span class="comment"># 也可直接让对象排序,只不过不是sorted,而是sort</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 采用生成表达式来生成列表</span></span><br><span class="line">f = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">f = [a + b <span class="keyword">for</span> a <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span> <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">&#x27;145&#x27;</span>] <span class="comment"># [&#x27;a1&#x27;, &#x27;a4&#x27;, &#x27;a5&#x27;, &#x27;b1&#x27;, &#x27;b4&#x27;, &#x27;b5&#x27;, &#x27;c1&#x27;, &#x27;c4&#x27;, &#x27;c5&#x27;]</span></span><br><span class="line"><span class="comment"># 此处创建的不是列表，而是生成器对象。</span></span><br><span class="line"><span class="comment"># 通过生成器可以获取到数据，但是不占用额外空间。</span></span><br><span class="line">f = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line"><span class="comment"># print(sys.getsizeof(f)) # 112</span></span><br><span class="line"><span class="built_in">print</span>(f) <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x000001FEC1F04820&gt;</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(val)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过关键词yiled将函数改造成生成器函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> fib(<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment"># a, b = b, a+b 这句话的含义是：先计算&#x27;=&#x27;右边的值，再将右边的值赋给左边</span></span><br></pre></td></tr></table></figure><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组 tuple"></a>元组 tuple</h3><p>元组也是一种容器数据类型，可以用一个变量来存储多个数据。</p><p><strong>与列表不同的是，元组中的元素不可以再更改</strong>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明元组</span></span><br><span class="line">t = (<span class="string">&#x27;Shika&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;中国北京&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># print(t)</span></span><br><span class="line"><span class="comment"># 报错，因为元组中元素不可更改</span></span><br><span class="line"><span class="comment"># tuple[2] = &#x27;中国海南&#x27;</span></span><br><span class="line"><span class="comment"># 元组与列表之间可以相互转换</span></span><br><span class="line">person_list = [<span class="string">&#x27;宇智波佐助&#x27;</span>, <span class="number">7</span>, <span class="literal">False</span>]</span><br><span class="line">person_tuple = <span class="built_in">tuple</span>(person_list)</span><br><span class="line"><span class="comment"># print(person_tuple) # (&#x27;宇智波佐助&#x27;, 7, False)</span></span><br><span class="line"><span class="comment"># print(list(person_tuple)) # [&#x27;宇智波佐助&#x27;, 7, False]</span></span><br><span class="line"><span class="comment"># 且列表中的元素可以更改</span></span><br><span class="line">person_list[<span class="number">2</span>] = <span class="string">&#x27;春野樱&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(person_list) <span class="comment"># [&#x27;宇智波佐助&#x27;, 7, &#x27;春野樱&#x27;]</span></span><br></pre></td></tr></table></figure><p>Q：为什么已经有列表，还需要元组？</p><p>A：元组中不能够修改的对象状态使项目更容易维护，并且其创建时间和空间占用都优于列表。</p><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h3><p>与数学中的集合一致，<strong>其中不允许有重复元素</strong>，可以进行交、并、差、补的运算。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建并使用集合</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># print(set1) # &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># print(&#x27;Length of set1 is&#x27;,len(set1)) # Length of set1 is 3</span></span><br><span class="line">set2 = <span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">set3 = <span class="built_in">set</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>))</span><br><span class="line"><span class="comment"># print(set2, set3) # &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125; &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># 采用print时，中间加一个逗号分隔，可以输出多个对象，中间自动空格填充。</span></span><br><span class="line">set4 = &#123;num <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> num % <span class="number">5</span> == <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集合中元素的增删</span></span><br><span class="line">set1.add(<span class="number">4</span>)</span><br><span class="line">set1.add(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 向set2末尾添加两个元素，这种方法可以为集合添加多个元素</span></span><br><span class="line">set2.update([<span class="number">11</span>, <span class="number">12</span>])</span><br><span class="line"><span class="comment"># 集合删除元素：discard或remove,pop</span></span><br><span class="line"><span class="comment"># 三者存在不同，remove移除一个不存在的元素会报错</span></span><br><span class="line">set2.discard(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">4</span> <span class="keyword">in</span> set2:</span><br><span class="line">    set2.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(set2)</span><br><span class="line"><span class="comment"># 集合中的pop方法，是从左边删除元素的</span></span><br><span class="line"><span class="built_in">print</span>(set3.pop())</span><br></pre></td></tr></table></figure><h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h3><p>与列表、集合共同点：可以存储任意类型对象</p><p>与列表、集合不同点：以键值对方式存储，键和值通过冒号分开</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;春野樱&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;宇智波佐助&#x27;</span>: <span class="number">91</span>, <span class="string">&#x27;漩涡鸣人&#x27;</span>: <span class="number">61</span>&#125;</span><br><span class="line"><span class="comment"># print(scores)</span></span><br><span class="line"><span class="comment"># 创造字典的构造器语法</span></span><br><span class="line">items1 = <span class="built_in">dict</span>(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># print(items1) # &#123;&#x27;one&#x27;: 1, &#x27;two&#x27;: 2, &#x27;three&#x27;: 3, &#x27;four&#x27;: 4&#125;</span></span><br><span class="line"><span class="comment"># 通过zip函数将两个列表压成一个字典</span></span><br><span class="line">items2 = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="string">&#x27;123&#x27;</span>))</span><br><span class="line"><span class="comment"># print(items2) # &#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;, &#x27;c&#x27;: &#x27;3&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 创造字典的推导式语法</span></span><br><span class="line">items3 = &#123;num: num ** <span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line"><span class="comment"># print(scores[&#x27;漩涡鸣人&#x27;])</span></span><br><span class="line"><span class="comment"># 遍历字典中所有键值对</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> scores:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span>:<span class="subst">&#123;scores[key]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># print(f&#x27;&#123;a&#125; * &#123;b&#125; = &#123;a*b&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># 相当于 print(&#x27;&#123;&#125; * &#123;&#125; = &#123;&#125;&#x27;.format(a, b, a*b)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新字典中的元素</span></span><br><span class="line">scores[<span class="string">&#x27;奈良鹿丸&#x27;</span>] = <span class="number">95</span></span><br><span class="line">scores[<span class="string">&#x27;山中井野&#x27;</span>] = <span class="number">80</span></span><br><span class="line"><span class="comment"># 字典中的批量构造，更新，字符串是不需要加引号的。</span></span><br><span class="line">scores.update(日向雏田=<span class="number">80</span>, 日向宁次 = <span class="number">82</span>)</span><br><span class="line"><span class="comment"># if &#x27;宇智波佐助&#x27; in scores:</span></span><br><span class="line"><span class="comment">#     print(scores[&#x27;宇智波佐助&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(scores.get(&#x27;李&#x27;)) # None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除字典中的元素</span></span><br><span class="line"><span class="comment"># print(scores.popitem()) # (&#x27;日向宁次&#x27;, 82)</span></span><br><span class="line"><span class="comment"># print(scores.pop(&#x27;日向雏田&#x27;)) # 80</span></span><br><span class="line">scores.clear()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 菜鸟养成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/01/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>忙活了好久，找到了小时候布置QQ空间和邮箱博客的感觉。</p><p>决定建立个人技术博客的起因在于：最近学python特别迫切想找个记录的地方，CSDN还被同门关注了，于是想到了从github搭建。</p><p>现在是研一的寒假，疫情从某方面来讲终于结束了，也再无法作为摆烂的理由。</p><p>希望自己永远自省，永远向前。</p><p>希望自己不忘初心，努力生活。</p><p>以上。</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
